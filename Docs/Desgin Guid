# Moonwave Design System v1.0

## 요약
Moonwave 구독관리 시스템의 Utility-First CSS Framework 기반 디자인 가이드라인 및 컴포넌트 설계 문서

## 분석

### Utility-First CSS Framework 철학
Moonwave는 Tailwind CSS의 utility-first 접근 방식을 핵심으로 하여 다음 원칙을 기반으로 설계되었습니다:

#### 핵심 설계 원칙
- **Utility-First**: 사전 정의된 유틸리티 클래스로 커스텀 디자인 구축
- **Component Abstraction**: 반복되는 패턴을 컴포넌트로 추상화
- **Design System Constraints**: 제약된 디자인 토큰으로 일관성 확보
- **Responsive by Default**: 모바일 우선 반응형 설계
- **Performance Optimized**: PurgeCSS로 미사용 스타일 제거

#### Utility-First의 장점
```tsx
// ❌ 전통적인 CSS 방식
.custom-button {
  background-color: #3b82f6;
  color: white;
  font-weight: bold;
  padding: 0.5rem 1rem;
  border-radius: 0.375rem;
  transition: background-color 0.2s;
}
.custom-button:hover {
  background-color: #2563eb;
}

// ✅ Utility-First 방식
<button className="bg-blue-500 text-white font-bold py-2 px-4 rounded transition-colors hover:bg-blue-600">
  버튼
</button>
```

**Utility-First 이점:**
1. **빠른 개발**: HTML에서 직접 스타일링, CSS 파일 전환 불필요
2. **안전한 변경**: 유틸리티 클래스는 해당 요소에만 영향
3. **쉬운 유지보수**: 6개월 후에도 이해하기 쉬운 명확한 클래스명
4. **높은 이식성**: 구조와 스타일이 같은 곳에 있어 복사/이동 용이

---

## 실행

### 1. Utility-First 설계 원칙

#### 원자적 디자인 접근
Moonwave는 원자적 유틸리티 클래스를 조합하여 복잡한 UI를 구성합니다:

```tsx
// 원자적 유틸리티 조합 예시
<div className="
  flex items-center justify-between
  w-full max-w-lg
  px-6 py-4 
  bg-white rounded-xl shadow-lg
  border border-gray-200
  hover:shadow-xl hover:scale-[1.02]
  transition-all duration-300
">
  {/* 컨텐츠 */}
</div>
```

#### 유틸리티 클래스 분류 체계
| 카테고리 | 유틸리티 예시 | 설명 |
|----------|---------------|------|
| **Layout** | `flex`, `grid`, `relative`, `absolute` | 레이아웃 구조 |
| **Spacing** | `p-4`, `m-6`, `space-x-2`, `gap-4` | 여백과 간격 |
| **Sizing** | `w-full`, `h-64`, `max-w-lg`, `min-h-screen` | 크기와 치수 |
| **Typography** | `text-xl`, `font-semibold`, `leading-tight` | 텍스트 스타일 |
| **Colors** | `bg-blue-500`, `text-gray-900`, `border-red-200` | 색상 시스템 |
| **Effects** | `shadow-lg`, `rounded-xl`, `opacity-75` | 시각적 효과 |
| **Interactivity** | `hover:bg-blue-600`, `focus:ring-2`, `active:scale-95` | 상호작용 |

#### 제약 기반 디자인 시스템
```javascript
// tailwind.config.js - Moonwave Design Tokens
module.exports = {
  theme: {
    extend: {
      colors: {
        moonwave: {
          primary: {
            50: '#eff6ff',
            100: '#dbeafe', 
            500: '#3b82f6',
            600: '#2563eb',
            900: '#1e3a8a'
          },
          secondary: {
            50: '#faf5ff',
            500: '#8b5cf6',
            600: '#7c3aed'
          },
          gray: {
            50: '#f9fafb',
            100: '#f3f4f6',
            500: '#6b7280',
            900: '#111827'
          }
        }
      },
      spacing: {
        '18': '4.5rem',
        '88': '22rem',
        '128': '32rem'
      },
      borderRadius: {
        'xl': '0.75rem',
        '2xl': '1rem',
        '3xl': '1.5rem'
      },
      boxShadow: {
        'soft': '0 4px 6px -1px rgba(0, 0, 0, 0.1)',
        'glow': '0 0 20px rgba(59, 130, 246, 0.3)',
        'premium': '0 20px 25px -5px rgba(0, 0, 0, 0.1)'
      }
    }
  }
}
```

### 2. 컴포넌트 추상화 전략

#### Pretendard 폰트 시스템 통합
Moonwave는 크로스 플랫폼 최적화된 Pretendard 폰트를 기본 타이포그래피 시스템으로 사용합니다:

```css
/* src/styles/globals.css */
@import url("https://cdn.jsdelivr.net/gh/orioncactus/pretendard@v1.3.9/dist/web/variable/pretendardvariable-dynamic-subset.min.css");

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    /* Pretendard 기반 타이포그래피 시스템 */
    --font-pretendard: "Pretendard Variable", Pretendard, -apple-system, BlinkMacSystemFont, system-ui, Roboto, "Helvetica Neue", "Segoe UI", "Apple SD Gothic Neo", "Noto Sans KR", "Malgun Gothic", "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", sans-serif;
  }
  
  html {
    font-family: var(--font-pretendard);
    font-feature-settings: 'cv01', 'cv02', 'cv03', 'cv04'; /* Pretendard OpenType 기능 */
  }
  
  body {
    @apply bg-background text-foreground;
    font-family: var(--font-pretendard);
    font-weight: 400;
    line-height: 1.6;
    letter-spacing: -0.01em; /* 한글 최적화 자간 */
  }
}
```

#### Tailwind Config에 Pretendard 통합
```javascript
// tailwind.config.js
const { fontFamily } = require('tailwindcss/defaultTheme');

module.exports = {
  theme: {
    extend: {
      fontFamily: {
        sans: [
          'Pretendard Variable', 
          'Pretendard', 
          ...fontFamily.sans
        ],
        pretendard: [
          'Pretendard Variable', 
          'Pretendard'
        ]
      },
      fontWeight: {
        // Pretendard 가변 폰트 weight 범위 (45-920)
        'extra-light': '200',
        'light': '300', 
        'normal': '400',
        'medium': '500',
        'semibold': '600',
        'bold': '700',
        'extra-bold': '800',
        'black': '900'
      },
      letterSpacing: {
        // 한글 최적화 자간
        'tighter': '-0.02em',
        'tight': '-0.01em',
        'normal': '0',
        'wide': '0.01em',
        'wider': '0.02em'
      }
    }
  }
}
```

#### Pretendard 기반 타이포그래피 유틸리티
```tsx
// 한글/영문 혼합 환경에 최적화된 타이포그래피 컴포넌트
const Typography = {
  // 대제목 (Hero, 랜딩)
  H1: ({ children, className, ...props }) => (
    <h1 className={cn(
      'text-4xl sm:text-5xl lg:text-6xl xl:text-7xl',
      'font-bold tracking-tight',
      'text-gray-900 dark:text-white',
      'leading-tight break-keep', // 한글 줄바꿈 최적화
      className
    )} {...props}>
      {children}
    </h1>
  ),
  
  // 제목 (페이지, 섹션)
  H2: ({ children, className, ...props }) => (
    <h2 className={cn(
      'text-2xl sm:text-3xl lg:text-4xl',
      'font-semibold tracking-tight',
      'text-gray-900 dark:text-white',
      'leading-tight break-keep',
      className
    )} {...props}>
      {children}
    </h2>
  ),
  
  // 소제목 (카드, 컴포넌트)
  H3: ({ children, className, ...props }) => (
    <h3 className={cn(
      'text-lg sm:text-xl lg:text-2xl',
      'font-medium tracking-tight',
      'text-gray-900 dark:text-white',
      'leading-snug break-keep',
      className
    )} {...props}>
      {children}
    </h3>
  ),
  
  // 본문 (기본 텍스트)
  Body: ({ children, className, ...props }) => (
    <p className={cn(
      'text-base lg:text-lg',
      'font-normal tracking-normal',
      'text-gray-700 dark:text-gray-300',
      'leading-relaxed break-keep',
      className
    )} {...props}>
      {children}
    </p>
  ),
  
  // 보조 텍스트 (캡션, 메타데이터)
  Caption: ({ children, className, ...props }) => (
    <span className={cn(
      'text-sm lg:text-base',
      'font-normal tracking-wide',
      'text-gray-500 dark:text-gray-400',
      'leading-normal',
      className
    )} {...props}>
      {children}
    </span>
  ),
  
  // 강조 텍스트
  Emphasis: ({ children, className, ...props }) => (
    <strong className={cn(
      'font-semibold',
      'text-gray-900 dark:text-white',
      className
    )} {...props}>
      {children}
    </strong>
  )
};

// 사용 예시
const ExampleCard = () => (
  <div className="bg-white rounded-xl p-6 shadow-lg">
    <Typography.H3 className="mb-3">
      Moonwave 구독 관리 시스템
    </Typography.H3>
    <Typography.Body className="mb-4">
      Pretendard 폰트를 활용한 최적화된 한글 타이포그래피로 
      <Typography.Emphasis> 뛰어난 가독성</Typography.Emphasis>을 제공합니다.
    </Typography.Body>
    <Typography.Caption>
      마지막 업데이트: 2025년 7월 26일
    </Typography.Caption>
  </div>
);
```

#### Next.js 환경에서의 Pretendard 로컬 폰트 최적화
```typescript
// app/layout.tsx (Next.js 13+ App Router)
import localFont from 'next/font/local';

const pretendard = localFont({
  src: [
    {
      path: './fonts/PretendardVariable.woff2',
      weight: '45 920', // 가변 폰트 weight 범위
      style: 'normal',
    }
  ],
  display: 'swap',
  variable: '--font-pretendard',
  preload: true,
  fallback: [
    '-apple-system', 
    'BlinkMacSystemFont', 
    'system-ui', 
    'Roboto', 
    'Helvetica Neue', 
    'Segoe UI', 
    'Apple SD Gothic Neo', 
    'Noto Sans KR', 
    'Malgun Gothic', 
    'sans-serif'
  ]
});

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="ko" className={`${pretendard.variable} font-sans`}>
      <body className="antialiased">{children}</body>
    </html>
  );
}

// pages/_app.tsx (Next.js Pages Router)
import localFont from 'next/font/local';

const pretendard = localFont({
  src: './fonts/PretendardVariable.woff2',
  display: 'swap',
  weight: '45 920',
  variable: '--font-pretendard'
});

export default function App({ Component, pageProps }) {
  return (
    <main className={`${pretendard.variable} font-sans`}>
      <Component {...pageProps} />
    </main>
  );
}
```

#### 한글 특화 유틸리티 클래스
```css
/* src/styles/components.css */
@layer components {
  /* 한글 줄바꿈 최적화 */
  .break-keep-ko {
    word-break: keep-all;
    overflow-wrap: break-word;
  }
  
  /* 한글 자간 최적화 */
  .tracking-ko-tight {
    letter-spacing: -0.02em;
  }
  
  .tracking-ko-normal {
    letter-spacing: -0.01em;
  }
  
  .tracking-ko-wide {
    letter-spacing: 0;
  }
  
  /* 한글/영문 혼합 텍스트 최적화 */
  .text-mixed {
    font-feature-settings: 'cv01', 'cv02', 'cv03', 'cv04';
    font-variant-numeric: proportional-nums;
  }
  
  /* 숫자 최적화 (구독료, 날짜 등) */
  .text-numeric {
    font-variant-numeric: tabular-nums;
    font-feature-settings: 'tnum';
  }
}
```

#### 유틸리티에서 컴포넌트로의 진화 (Pretendard 적용)
```tsx
// 1단계: 순수 유틸리티 (Pretendard 기본 적용)
<button className="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg transition-colors duration-200 font-pretendard tracking-ko-normal">
  구독 추가
</button>

// 2단계: 패턴 식별 (한글 최적화 포함)
<button className="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg transition-colors duration-200 font-pretendard tracking-ko-normal break-keep-ko">
  알림 설정
</button>

// 3단계: 컴포넌트 추상화 (Pretendard 최적화 내장)
const Button = ({ variant = 'primary', size = 'md', children, className = '', ...props }) => {
  const baseClasses = cn(
    'font-pretendard font-semibold rounded-lg transition-colors duration-200',
    'focus:outline-none focus:ring-2 focus:ring-offset-2',
    'tracking-ko-normal break-keep-ko text-mixed',
    'antialiased' // Pretendard 렌더링 최적화
  );
  
  const variantClasses = {
    primary: 'bg-blue-500 hover:bg-blue-600 text-white focus:ring-blue-500',
    secondary: 'bg-gray-200 hover:bg-gray-300 text-gray-900 focus:ring-gray-500',
    destructive: 'bg-red-500 hover:bg-red-600 text-white focus:ring-red-500',
    ghost: 'bg-transparent hover:bg-gray-100 text-gray-700 focus:ring-gray-500'
  };
  
  const sizeClasses = {
    sm: 'py-1.5 px-3 text-sm',
    md: 'py-2 px-4 text-base',
    lg: 'py-3 px-6 text-lg'
  };
  
  return (
    <button 
      className={cn(baseClasses, variantClasses[variant], sizeClasses[size], className)}
      {...props}
    >
      {children}
    </button>
  );
};

// 4단계: 사용 (Pretendard 최적화가 자동 적용)
<Button variant="primary" size="md">구독 추가</Button>
<Button variant="secondary" size="sm">취소</Button>
<Button variant="destructive" size="lg">삭제하기</Button>
```

#### Pretendard 반응형 타이포그래피 패턴
```tsx
// 반응형 Pretendard 타이포그래피 유틸리티
const ResponsiveText = {
  // 대형 제목 (랜딩, 히어로)
  Hero: ({ children, className }) => (
    <h1 className={cn(
      'font-pretendard font-black tracking-ko-tight break-keep-ko',
      'text-3xl sm:text-4xl md:text-5xl lg:text-6xl xl:text-7xl',
      'leading-none sm:leading-tight',
      'bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent',
      className
    )}>
      {children}
    </h1>
  ),
  
  // 페이지 제목
  PageTitle: ({ children, className }) => (
    <h1 className={cn(
      'font-pretendard font-bold tracking-ko-tight break-keep-ko',
      'text-2xl sm:text-3xl lg:text-4xl',
      'text-gray-900 dark:text-white',
      'leading-tight',
      className
    )}>
      {children}
    </h1>
  ),
  
  // 섹션 제목
  SectionTitle: ({ children, className }) => (
    <h2 className={cn(
      'font-pretendard font-semibold tracking-ko-normal break-keep-ko',
      'text-xl sm:text-2xl lg:text-3xl',
      'text-gray-800 dark:text-gray-100',
      'leading-snug',
      className
    )}>
      {children}
    </h2>
  ),
  
  // 카드 제목
  CardTitle: ({ children, className }) => (
    <h3 className={cn(
      'font-pretendard font-medium tracking-ko-normal break-keep-ko',
      'text-lg sm:text-xl',
      'text-gray-900 dark:text-white',
      'leading-snug',
      className
    )}>
      {children}
    </h3>
  ),
  
  // 본문 텍스트
  Body: ({ children, className, size = 'md' }) => {
    const sizeClasses = {
      sm: 'text-sm sm:text-base',
      md: 'text-base sm:text-lg',
      lg: 'text-lg sm:text-xl'
    };
    
    return (
      <p className={cn(
        'font-pretendard font-normal tracking-ko-normal break-keep-ko',
        sizeClasses[size],
        'text-gray-700 dark:text-gray-300',
        'leading-relaxed',
        className
      )}>
        {children}
      </p>
    );
  },
  
  // 라벨 텍스트
  Label: ({ children, className }) => (
    <label className={cn(
      'font-pretendard font-medium tracking-ko-wide',
      'text-sm sm:text-base',
      'text-gray-700 dark:text-gray-300',
      'leading-normal',
      className
    )}>
      {children}
    </label>
  ),
  
  // 캡션/메타데이터
  Caption: ({ children, className }) => (
    <span className={cn(
      'font-pretendard font-normal tracking-ko-wide',
      'text-xs sm:text-sm',
      'text-gray-500 dark:text-gray-400',
      'leading-normal',
      className
    )}>
      {children}
    </span>
  ),
  
  // 숫자 표시 (가격, 날짜)
  Numeric: ({ children, className, variant = 'price' }) => {
    const variantClasses = {
      price: 'font-bold text-blue-600 dark:text-blue-400',
      date: 'font-medium text-gray-600 dark:text-gray-400',
      count: 'font-semibold text-gray-900 dark:text-white'
    };
    
    return (
      <span className={cn(
        'font-pretendard text-numeric tracking-ko-wide',
        'text-base sm:text-lg',
        variantClasses[variant],
        className
      )}>
        {children}
      </span>
    );
  }
};

// 실제 사용 예시
const SubscriptionCard = ({ subscription }) => (
  <div className="@container bg-white rounded-xl p-6 shadow-lg border border-gray-200 hover:shadow-xl transition-shadow duration-200">
    <div className="flex items-start justify-between @md:items-center mb-4">
      <div className="flex-1 min-w-0">
        <ResponsiveText.CardTitle className="mb-2">
          {subscription.name}
        </ResponsiveText.CardTitle>
        <ResponsiveText.Caption>
          {subscription.category} • 월간 구독
        </ResponsiveText.Caption>
      </div>
      <div className="@md:text-right">
        <ResponsiveText.Numeric variant="price">
          ₩{subscription.price.toLocaleString()}
        </ResponsiveText.Numeric>
        <ResponsiveText.Caption className="block @md:mt-1">
          다음 결제: 
          <ResponsiveText.Numeric variant="date" className="ml-1">
            {subscription.nextBilling}
          </ResponsiveText.Numeric>
        </ResponsiveText.Caption>
      </div>
    </div>
    
    <ResponsiveText.Body size="sm" className="mb-4">
      {subscription.description}
    </ResponsiveText.Body>
    
    <div className="flex @md:flex-row flex-col @md:items-center justify-between gap-3">
      <ResponsiveText.Label>
        상태: <span className="text-green-600">활성</span>
      </ResponsiveText.Label>
      
      <div className="flex gap-2">
        <Button variant="ghost" size="sm">수정</Button>
        <Button variant="destructive" size="sm">해지</Button>
      </div>
    </div>
  </div>
);

// 랜딩 페이지 헤더 예시
const HeroSection = () => (
  <section className="@container py-20 px-4">
    <div className="max-w-4xl mx-auto text-center">
      <ResponsiveText.Hero className="mb-6">
        구독 관리의 새로운 기준
      </ResponsiveText.Hero>
      
      <ResponsiveText.Body size="lg" className="mb-8 max-w-2xl mx-auto">
        Moonwave로 모든 구독 서비스를 체계적으로 관리하고, 
        <ResponsiveText.Emphasis> 불필요한 지출을 줄여보세요</ResponsiveText.Emphasis>.
      </ResponsiveText.Body>
      
      <div className="flex @md:flex-row flex-col @md:items-center justify-center gap-4">
        <Button variant="primary" size="lg">무료로 시작하기</Button>
        <Button variant="ghost" size="lg">더 알아보기</Button>
      </div>
      
      <ResponsiveText.Caption className="mt-6">
        신용카드 등록 없이 즉시 시작 • 언제든 해지 가능
      </ResponsiveText.Caption>
    </div>
  </section>
);
```

#### Pretendard CDN 최적화 전략
```html
<!-- public/index.html 또는 app/layout.tsx의 head -->
<!-- 성능 최적화: 가변 다이나믹 서브셋 사용 (권장) -->
<link 
  rel="preload" 
  as="style" 
  crossorigin 
  href="https://cdn.jsdelivr.net/gh/orioncactus/pretendard@v1.3.9/dist/web/variable/pretendardvariable-dynamic-subset.min.css"
/>
<link 
  rel="stylesheet" 
  as="style" 
  crossorigin 
  href="https://cdn.jsdelivr.net/gh/orioncactus/pretendard@v1.3.9/dist/web/variable/pretendardvariable-dynamic-subset.min.css" 
/>

<!-- 폴백: 정적 서브셋 -->
<link 
  rel="preload" 
  as="style" 
  crossorigin 
  href="https://cdn.jsdelivr.net/gh/orioncactus/pretendard@v1.3.9/dist/web/static/pretendard-dynamic-subset.min.css"
  media="screen and (max-width: 768px)"
/>

<!-- 성능 모니터링을 위한 리소스 힌트 -->
<link rel="dns-prefetch" href="//cdn.jsdelivr.net" />
<link rel="preconnect" href="https://cdn.jsdelivr.net" crossorigin />
```

#### 조건부 클래스 관리
```tsx
// clsx/classnames 라이브러리 사용
import clsx from 'clsx';

const Card = ({ isActive, isError, size, className, children }) => {
  return (
    <div className={clsx(
      // 기본 스타일
      'rounded-xl border p-6 transition-all duration-200',
      
      // 상태별 스타일
      {
        'bg-blue-50 border-blue-200': isActive,
        'bg-red-50 border-red-200': isError,
        'bg-white border-gray-200': !isActive && !isError,
      },
      
      // 크기별 스타일
      {
        'p-4 text-sm': size === 'sm',
        'p-6 text-base': size === 'md',
        'p-8 text-lg': size === 'lg',
      },
      
      // 추가 클래스
      className
    )}>
      {children}
    </div>
  );
};
```

#### CSS-in-JS vs Utility-First 하이브리드
```tsx
// Tailwind의 @apply 지시문 활용 (제한적 사용)
// components.css
.btn-moonwave {
  @apply font-semibold py-2 px-4 rounded-lg transition-colors duration-200;
  @apply focus:outline-none focus:ring-2 focus:ring-offset-2;
}

.btn-moonwave-primary {
  @apply bg-blue-500 hover:bg-blue-600 text-white focus:ring-blue-500;
}

.btn-moonwave-secondary {
  @apply bg-gray-200 hover:bg-gray-300 text-gray-900 focus:ring-gray-500;
}

// 복잡한 애니메이션이나 계산된 스타일에만 커스텀 CSS 사용
.moonwave-wave-animation {
  animation: wave 3s ease-in-out infinite;
}

@keyframes wave {
  0%, 100% { transform: translateY(0px) rotate(0deg); }
  50% { transform: translateY(-10px) rotate(1deg); }
}
```
### 3. 상태 기반 스타일링

#### Variant 시스템 활용
Tailwind의 강력한 variant 시스템을 활용한 인터랙티브 스타일링:

```tsx
// 호버, 포커스, 액티브 상태
<button className="
  bg-blue-500 text-white px-4 py-2 rounded-lg
  hover:bg-blue-600 hover:scale-105
  focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2
  active:scale-95 active:bg-blue-700
  disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-blue-500
  transition-all duration-200 ease-in-out
">
  인터랙티브 버튼
</button>

// 그룹 호버 효과
<div className="group cursor-pointer">
  <div className="bg-white group-hover:bg-gray-50 rounded-lg p-4 transition-colors">
    <h3 className="text-gray-900 group-hover:text-blue-600 transition-colors">제목</h3>
    <p className="text-gray-500 group-hover:text-gray-700 transition-colors">설명</p>
  </div>
</div>

// 다크모드 지원
<div className="bg-white dark:bg-gray-900 text-gray-900 dark:text-white">
  <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
    다크모드 제목
  </h1>
  <p className="text-gray-600 dark:text-gray-300">
    다크모드 본문
  </p>
</div>

// Peer 상태 (형제 요소 상태에 따른 스타일)
<div>
  <input className="peer sr-only" type="checkbox" id="toggle" />
  <label 
    htmlFor="toggle"
    className="
      inline-block w-12 h-6 bg-gray-300 rounded-full cursor-pointer
      peer-checked:bg-blue-500
      transition-colors duration-200
    "
  >
    <span className="
      block w-5 h-5 bg-white rounded-full transform transition-transform duration-200
      peer-checked:translate-x-6 translate-x-0.5 translate-y-0.5
    "></span>
  </label>
</div>
```

#### 반응형 Utility-First 패턴
```tsx
// 모바일 우선 반응형 설계
<div className="
  // Mobile (기본)
  flex flex-col gap-4 p-4 text-sm
  
  // Tablet (768px+)
  sm:flex-row sm:gap-6 sm:p-6 sm:text-base
  
  // Desktop (1024px+)
  lg:gap-8 lg:p-8 lg:text-lg
  
  // Large Desktop (1280px+)
  xl:gap-12 xl:p-12 xl:text-xl
">
  반응형 콘텐츠
</div>

// 그리드 시스템 반응형
<div className="
  grid gap-4
  grid-cols-1
  sm:grid-cols-2 
  lg:grid-cols-3
  xl:grid-cols-4
">
  {items.map(item => (
    <div key={item.id} className="
      bg-white rounded-lg p-4 shadow-sm
      hover:shadow-lg transition-shadow duration-200
      sm:p-6 lg:p-8
    ">
      {item.content}
    </div>
  ))}
</div>
```

### 4. 성능 최적화 전략

#### PurgeCSS 최적화
```javascript
// tailwind.config.js
module.exports = {
  content: [
    './src/**/*.{js,jsx,ts,tsx}',
    './public/index.html'
  ],
  safelist: [
    // 동적으로 생성되는 클래스 보호
    'bg-red-500',
    'bg-green-500', 
    'bg-blue-500',
    /^text-(red|green|blue)-(400|500|600)$/,
    // 써드파티 라이브러리 클래스
    'swiper-slide',
    'leaflet-container'
  ],
  theme: {
    // 커스텀 테마
  }
}
```

#### 동적 클래스 생성 최적화
```tsx
// ❌ 잘못된 방식 - 클래스가 빌드에서 제거될 수 있음
const colors = ['red', 'blue', 'green'];
const bgClass = `bg-${colors[index]}-500`; // 동적 생성

// ✅ 올바른 방식 - 완전한 클래스명 사용
const colorMap = {
  red: 'bg-red-500 text-red-900 border-red-200',
  blue: 'bg-blue-500 text-blue-900 border-blue-200', 
  green: 'bg-green-500 text-green-900 border-green-200'
};
const classes = colorMap[color];

// ✅ 대안 - 모든 가능한 클래스를 safelist에 추가
const dynamicClasses = [
  'bg-red-500', 'bg-blue-500', 'bg-green-500',
  'text-red-900', 'text-blue-900', 'text-green-900'
];
```

#### 번들 크기 모니터링
```bash
# 빌드 분석
npm run build -- --analyze

# 또는 webpack-bundle-analyzer 사용
npx webpack-bundle-analyzer build/static/js/*.js
```

### 5. 개발 워크플로우 최적화

#### IDE 설정 및 도구
```json
// .vscode/settings.json
{
  "tailwindCSS.includeLanguages": {
    "javascript": "javascript",
    "html": "HTML"
  },
  "tailwindCSS.experimental.classRegex": [
    "tw`([^`]*)", // styled-components 등에서 사용
    ["clsx\\(([^)]*)\\)", "'([^']*)'"], // clsx 함수 내 클래스
    ["classnames\\(([^)]*)\\)", "'([^']*)'"] // classnames 함수 내 클래스
  ],
  "editor.formatOnSave": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode"
}

// .prettierrc
{
  "plugins": ["prettier-plugin-tailwindcss"],
  "tailwindConfig": "./tailwind.config.js"
}
```

#### ESLint 규칙 설정
```javascript
// .eslintrc.js
module.exports = {
  extends: [
    // 기본 규칙들...
  ],
  rules: {
    // Tailwind 관련 린트 규칙
    'tailwindcss/classnames-order': 'error',
    'tailwindcss/no-custom-classname': 'warn',
    'tailwindcss/no-contradicting-classname': 'error'
  },
  plugins: ['tailwindcss']
}
```

### 6. Moonwave 전용 Utility 패턴

#### 재사용 가능한 Utility 조합
```tsx
// 자주 사용되는 패턴을 CSS 컴포넌트로 추출
@layer components {
  .moonwave-card {
    @apply bg-white rounded-xl border border-gray-200 shadow-sm hover:shadow-lg transition-shadow duration-200;
  }
  
  .moonwave-button-primary {
    @apply bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg;
    @apply focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2;
    @apply transition-all duration-200 ease-in-out;
  }
  
  .moonwave-input {
    @apply w-full px-3 py-2 border border-gray-300 rounded-md;
    @apply focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500;
    @apply placeholder-gray-400 text-gray-900;
  }
  
  .moonwave-glass {
    @apply backdrop-blur-md bg-white/80 border border-white/20;
  }
}

// 사용 예시
<div className="moonwave-card p-6">
  <h3 className="text-lg font-semibold mb-4">구독 정보</h3>
  <input className="moonwave-input mb-4" placeholder="서비스명" />
  <button className="moonwave-button-primary">저장</button>
</div>
```

#### 커스텀 Utility 클래스 생성
```javascript
// tailwind.config.js
const plugin = require('tailwindcss/plugin')

module.exports = {
  // 기존 설정...
  plugins: [
    plugin(function({ addUtilities, theme }) {
      addUtilities({
        // 커스텀 그림자 유틸리티
        '.shadow-moonwave': {
          'box-shadow': '0 4px 6px -1px rgba(59, 130, 246, 0.1), 0 2px 4px -1px rgba(59, 130, 246, 0.06)'
        },
        '.shadow-moonwave-lg': {
          'box-shadow': '0 10px 15px -3px rgba(59, 130, 246, 0.1), 0 4px 6px -2px rgba(59, 130, 246, 0.05)'
        },
        
        // 웨이브 효과 유틸리티
        '.wave-clip': {
          'clip-path': 'polygon(0 0, 100% 0, 100% 85%, 0 100%)'
        },
        
        // 글래스 모피즘 변형
        '.glass-strong': {
          'backdrop-filter': 'blur(16px)',
          'background': 'rgba(255, 255, 255, 0.9)',
          'border': '1px solid rgba(255, 255, 255, 0.3)'
        },
        '.glass-subtle': {
          'backdrop-filter': 'blur(8px)',
          'background': 'rgba(255, 255, 255, 0.6)',
          'border': '1px solid rgba(255, 255, 255, 0.2)'
        }
      })
    })
  ]
}
```

### 7. 타이포그래피 Utility 시스템 (Pretendard)

#### Pretendard 기반 타이포그래피 스케일
```tsx
// Pretendard 최적화 타이포그래피 시스템
const TYPOGRAPHY_SCALE = {
  // 가변 폰트 weight 활용 (45-920 범위)
  fontWeight: {
    'extra-light': '200',
    'light': '300', 
    'regular': '400',
    'medium': '500',
    'semibold': '600',
    'bold': '700',
    'extra-bold': '800',
    'black': '900'
  },
  
  // 한글 최적화 자간
  letterSpacing: {
    'korean-tight': '-0.02em',
    'korean-normal': '-0.01em', 
    'korean-wide': '0em',
    'mixed-content': '-0.005em' // 한영 혼합시
  },
  
  // 가독성 최적화 행간
  lineHeight: {
    'title': '1.2',
    'heading': '1.3', 
    'body': '1.6',
    'caption': '1.4'
  }
};

// 계층적 텍스트 시스템 with Pretendard
<div className="space-y-8 font-pretendard">
  {/* Hero Title - 최대 강조 */}
  <h1 className="
    text-4xl sm:text-5xl lg:text-6xl xl:text-7xl
    font-black tracking-korean-tight leading-title
    text-gray-900 dark:text-white
    break-keep-ko antialiased
  ">
    구독을 스마트하게 관리하세요
  </h1>
  
  {/* Page Title - 페이지 주제 */}
  <h1 className="
    text-2xl sm:text-3xl lg:text-4xl
    font-bold tracking-korean-tight leading-heading
    text-gray-900 dark:text-white
    break-keep-ko
  ">
    내 구독 현황
  </h1>
  
  {/* Section Title - 섹션 구분 */}
  <h2 className="
    text-xl sm:text-2xl lg:text-3xl
    font-semibold tracking-korean-normal leading-heading
    text-gray-800 dark:text-gray-100
    break-keep-ko
  ">
    활성 구독 서비스
  </h2>
  
  {/* Component Title - 컴포넌트 제목 */}
  <h3 className="
    text-lg sm:text-xl
    font-medium tracking-korean-normal leading-heading
    text-gray-900 dark:text-white
    break-keep-ko
  ">
    Netflix Premium
  </h3>
  
  {/* Body Text - 본문 */}
  <p className="
    text-base lg:text-lg
    font-regular tracking-mixed-content leading-body
    text-gray-700 dark:text-gray-300
    break-keep-ko
  ">
    월 17,000원으로 무제한 스트리밍을 즐기세요. 4K 화질과 다중 기기 동시 접속을 지원합니다.
  </p>
  
  {/* Small Text - 보조 정보 */}
  <span className="
    text-sm lg:text-base
    font-regular tracking-korean-wide leading-caption
    text-gray-500 dark:text-gray-400
  ">
    다음 결제일: 2025년 8월 15일
  </span>
  
  {/* Label Text - 폼 라벨 */}
  <label className="
    text-sm font-medium tracking-korean-normal leading-caption
    text-gray-700 dark:text-gray-300
    break-keep-ko
  ">
    구독 서비스명
  </label>
  
  {/* Numeric Text - 숫자, 가격 */}
  <span className="
    text-lg font-bold text-numeric tracking-korean-wide
    text-blue-600 dark:text-blue-400
    tabular-nums
  ">
    ₩127,000
  </span>
</div>

// 숫자/날짜 전용 최적화 (Pretendard의 tabular-nums 활용)
<div className="space-y-4">
  {/* 가격 표시 */}
  <div className="text-numeric tabular-nums font-bold text-2xl text-blue-600">
    ₩89,500
  </div>
  
  {/* 날짜 표시 */}
  <div className="text-numeric tabular-nums font-medium text-gray-600">
    2025.08.15
  </div>
  
  {/* 통계 숫자 */}
  <div className="text-numeric tabular-nums font-semibold text-3xl text-gray-900">
    1,234
  </div>
</div>

// 반응형 타이포그래피 (컨테이너 + 뷰포트 조합)
<div className="@container">
  <h2 className="
    text-xl @md:text-2xl @lg:text-3xl
    sm:text-2xl lg:text-4xl
    font-bold tracking-korean-tight
    break-keep-ko leading-heading
  ">
    컨테이너와 뷰포트 모두 반응하는 제목
  </h2>
  
  <p className="
    text-sm @md:text-base @lg:text-lg
    sm:text-base lg:text-xl
    font-regular tracking-mixed-content leading-body
    break-keep-ko
  ">
    컨테이너 크기와 화면 크기에 모두 반응하는 본문 텍스트입니다.
  </p>
</div>
```

#### Pretendard OpenType 기능 활용
```css
/* src/styles/components.css */
@layer components {
  /* Pretendard OpenType 기능 최대 활용 */
  .text-optimized {
    font-feature-settings: 
      'cv01' 1,  /* Alternate a */
      'cv02' 1,  /* Alternate g */ 
      'cv03' 1,  /* Alternate y */
      'cv04' 1,  /* Alternate 6 and 9 */
      'case' 1,  /* Case sensitive punctuation */
      'kern' 1,  /* Kerning */
      'liga' 1;  /* Ligatures */
    font-variant-numeric: proportional-nums;
  }
  
  /* 숫자 최적화 (대시보드, 통계) */
  .text-numeric-optimized {
    font-feature-settings: 
      'tnum' 1,  /* Tabular numbers */
      'case' 1,  /* Case sensitive */
      'kern' 1;
    font-variant-numeric: tabular-nums slashed-zero;
  }
  
  /* 한글 본문 최적화 */
  .text-korean-body {
    font-feature-settings: 'kern' 1;
    word-break: keep-all;
    overflow-wrap: break-word;
    hanging-punctuation: first last;
  }
  
  /* 영문/숫자 혼합 최적화 */
  .text-mixed-content {
    font-feature-settings: 
      'kern' 1,
      'liga' 1,
      'calt' 1;  /* Contextual alternates */
    font-variant-numeric: proportional-nums;
  }
}
```

#### 다국어 지원 타이포그래피
```tsx
// 언어별 최적화 컴포넌트
const MultiLanguageText = ({ 
  text, 
  lang = 'ko', 
  className,
  variant = 'body' 
}) => {
  const langOptimizations = {
    ko: 'break-keep-ko tracking-korean-normal text-korean-body',
    en: 'tracking-normal break-words text-mixed-content', 
    ja: 'break-keep tracking-wide text-mixed-content',
    zh: 'break-keep tracking-wider text-korean-body'
  };
  
  const variantClasses = {
    title: 'text-2xl font-bold leading-heading',
    heading: 'text-xl font-semibold leading-heading',
    body: 'text-base font-regular leading-body',
    caption: 'text-sm font-regular leading-caption'
  };
  
  return (
    <span 
      lang={lang}
      className={cn(
        'font-pretendard antialiased',
        langOptimizations[lang],
        variantClasses[variant],
        className
      )}
    >
      {text}
    </span>
  );
};

// 사용 예시
<div className="space-y-4">
  <MultiLanguageText 
    text="구독 관리 시스템" 
    lang="ko" 
    variant="title"
  />
  <MultiLanguageText 
    text="Subscription Management System" 
    lang="en" 
    variant="title" 
  />
  <MultiLanguageText 
    text="サブスクリプション管理システム" 
    lang="ja" 
    variant="title"
  />
</div>
```

### 8. 컬러 시스템 Utility

#### 시맨틱 컬러 활용
```tsx
// 의미론적 컬러 시스템
<div className="space-y-4">
  {/* 성공 상태 */}
  <div className="bg-green-50 border-l-4 border-green-400 p-4">
    <div className="flex">
      <CheckCircleIcon className="h-5 w-5 text-green-400" />
      <div className="ml-3">
        <p className="text-sm text-green-700">
          구독이 성공적으로 추가되었습니다.
        </p>
      </div>
    </div>
  </div>
  
  {/* 경고 상태 */}
  <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4">
    <div className="flex">
      <ExclamationTriangleIcon className="h-5 w-5 text-yellow-400" />
      <div className="ml-3">
        <p className="text-sm text-yellow-700">
          결제일이 3일 남았습니다.
        </p>
      </div>
    </div>
  </div>
  
  {/* 에러 상태 */}
  <div className="bg-red-50 border-l-4 border-red-400 p-4">
    <div className="flex">
      <XCircleIcon className="h-5 w-5 text-red-400" />
      <div className="ml-3">
        <p className="text-sm text-red-700">
          결제 처리 중 오류가 발생했습니다.
        </p>
      </div>
    </div>
  </div>
  
  {/* 정보 상태 */}
  <div className="bg-blue-50 border-l-4 border-blue-400 p-4">
    <div className="flex">
      <InformationCircleIcon className="h-5 w-5 text-blue-400" />
      <div className="ml-3">
        <p className="text-sm text-blue-700">
          새로운 기능이 추가되었습니다.
        </p>
      </div>
    </div>
  </div>
</div>

// 그라디언트 유틸리티
<div className="
  bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500
  text-white p-8 rounded-xl
">
  그라디언트 배경
</div>

<h1 className="
  text-4xl font-bold
  bg-gradient-to-r from-blue-600 to-purple-600
  bg-clip-text text-transparent
">
  그라디언트 텍스트
</h1>
```

#### Container Queries (@tailwindcss/container-queries)
Moonwave는 Tailwind CSS Container Queries 플러그인을 활용하여 컨테이너 기반 반응형 디자인을 구현합니다.

##### 설치 및 설정
```bash
npm install -D @tailwindcss/container-queries
```

```javascript
// tailwind.config.js
module.exports = {
  theme: {
    extend: {
      containers: {
        '2xs': '16rem',
        'xs': '20rem',
        'sm': '24rem',
        'md': '28rem',
        'lg': '32rem',
        'xl': '36rem',
        '2xl': '42rem',
        '3xl': '48rem',
        '4xl': '56rem',
        '5xl': '64rem',
        '6xl': '72rem',
        '7xl': '80rem',
      },
    },
  },
  plugins: [
    require('@tailwindcss/container-queries'),
  ],
}
```

##### Container Queries 사용법
```tsx
// 기본 컨테이너 쿼리
<div className="@container">
  <div className="@lg:underline @xl:text-2xl">
    {/* 컨테이너가 32rem보다 클 때 밑줄, 36rem보다 클 때 큰 텍스트 */}
    구독 서비스명
  </div>
</div>

// 명명된 컨테이너
<div className="@container/stats">
  <div className="grid grid-cols-1 @md/stats:grid-cols-2 @lg/stats:grid-cols-4 gap-4">
    {/* stats 컨테이너 크기에 따른 그리드 변화 */}
    <StatsCard title="총 구독" value="12" />
    <StatsCard title="활성" value="10" />
  </div>
</div>

// 임의 값 사용
<div className="@container">
  <div className="@[17.5rem]:flex @[25rem]:flex-row">
    {/* 17.5rem에서 flex, 25rem에서 flex-row */}
  </div>
</div>
```

##### Moonwave Container Query 패턴
```tsx
// 구독 카드 컨테이너 쿼리
<div className="@container/card bg-white rounded-lg shadow-soft p-4">
  <div className="flex @sm/card:flex-row flex-col @sm/card:items-center gap-4">
    <div className="@sm/card:w-16 @sm/card:h-16 w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
      <img src="/netflix-icon.svg" alt="Netflix" className="@sm/card:w-8 @sm/card:h-8 w-6 h-6" />
    </div>
    
    <div className="flex-1">
      <h3 className="@sm/card:text-lg text-base font-semibold">Netflix Premium</h3>
      <p className="@sm/card:text-sm text-xs text-gray-500 @lg/card:block hidden">
        월간 스트리밍 서비스
      </p>
    </div>
    
    <div className="@sm/card:text-right">
      <div className="@sm/card:text-xl text-lg font-bold text-blue-600">₩17,000</div>
      <div className="@sm/card:text-sm text-xs text-gray-500">
        다음 결제: <span className="@lg/card:inline hidden">2024년 </span>8월 15일
      </div>
    </div>
  </div>
</div>

// 대시보드 레이아웃 컨테이너 쿼리
<div className="@container/dashboard min-h-screen">
  <div className="grid @3xl/dashboard:grid-cols-[250px_1fr] @xl/dashboard:grid-cols-[200px_1fr] grid-cols-1">
    {/* 사이드바 */}
    <aside className="@xl/dashboard:block hidden bg-gray-50 border-r">
      <nav className="p-4 space-y-2">
        <a href="#" className="block @2xl/dashboard:px-4 px-2 py-2 rounded hover:bg-gray-200">
          <span className="@2xl/dashboard:text-sm text-xs">대시보드</span>
        </a>
      </nav>
    </aside>
    
    {/* 메인 콘텐츠 */}
    <main className="@container/main flex-1">
      <div className="@lg/main:p-8 p-4">
        <div className="grid @2xl/main:grid-cols-4 @lg/main:grid-cols-3 @md/main:grid-cols-2 grid-cols-1 gap-6">
          {/* 통계 카드들 */}
        </div>
      </div>
    </main>
  </div>
</div>

// 모달 컨테이너 쿼리
<div className="@container/modal fixed inset-0 z-50 flex items-center justify-center p-4">
  <div className="@md/modal:max-w-lg @sm/modal:max-w-md max-w-sm w-full bg-white rounded-lg shadow-xl">
    <div className="@md/modal:p-6 p-4">
      <h2 className="@md/modal:text-xl text-lg font-semibold mb-4">구독 추가</h2>
      
      <div className="space-y-4">
        <div className="grid @md/modal:grid-cols-2 grid-cols-1 gap-4">
          <input 
            className="@md/modal:text-base text-sm px-3 py-2 border rounded" 
            placeholder="서비스명" 
          />
          <input 
            className="@md/modal:text-base text-sm px-3 py-2 border rounded" 
            placeholder="가격" 
          />
        </div>
      </div>
      
      <div className="@md/modal:flex-row flex flex-col @md/modal:gap-3 gap-2 mt-6">
        <button className="@md/modal:flex-1 w-full px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
          추가
        </button>
        <button className="@md/modal:flex-1 w-full px-4 py-2 border border-gray-300 rounded hover:bg-gray-50">
          취소
        </button>
      </div>
    </div>
  </div>
</div>
```

#### 컨테이너 쿼리 브레이크포인트
| 크기 | 클래스 | 컨테이너 너비 |
|------|--------|---------------|
| **2XS** | `@2xs:` | 16rem (256px) |
| **XS** | `@xs:` | 20rem (320px) |
| **SM** | `@sm:` | 24rem (384px) |
| **MD** | `@md:` | 28rem (448px) |
| **LG** | `@lg:` | 32rem (512px) |
| **XL** | `@xl:` | 36rem (576px) |
| **2XL** | `@2xl:` | 42rem (672px) |
| **3XL** | `@3xl:` | 48rem (768px) |
| **4XL** | `@4xl:` | 56rem (896px) |
| **5XL** | `@5xl:` | 64rem (1024px) |
| **6XL** | `@6xl:` | 72rem (1152px) |
| **7XL** | `@7xl:` | 80rem (1280px) |

#### 반응형 패턴 (기존 + Container Queries)
```tsx
// 전통적인 반응형 (뷰포트 기반)
<span className="hidden lg:inline">텍스트</span>
<div className="w-12 h-12 md:w-14 md:h-14 lg:w-auto lg:h-16">

// 컨테이너 쿼리 기반 반응형
<div className="@container">
  <span className="@lg:inline hidden">텍스트</span>
  <div className="w-12 h-12 @md:w-14 @md:h-14 @lg:w-auto @lg:h-16">
</div>

// 하이브리드 반응형 (뷰포트 + 컨테이너)
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 @container">
  <div className="@md:p-6 p-4 @lg:shadow-lg shadow-sm">
    {/* 뷰포트에서 그리드, 컨테이너에서 패딩과 그림자 */}
  </div>
</div>
```

#### Container Queries 장점
- **컴포넌트 중심**: 각 컴포넌트가 자신의 크기에 따라 반응
- **재사용성**: 다양한 레이아웃에서 동일한 컴포넌트 사용 가능
- **정밀한 제어**: 뷰포트가 아닌 실제 컨테이너 크기 기반
- **모듈화**: 독립적인 반응형 동작으로 유지보수성 향상

#### Container Queries 사용 지침
1. **@container 클래스로 컨테이너 정의**
2. **명명된 컨테이너로 복잡한 레이아웃 관리**
3. **임의 값으로 정밀한 브레이크포인트 설정**
4. **기존 반응형과 혼합하여 최적의 UX 구현**

---

### 9. 접근성 가이드라인

#### 컬러 대비
- **최소 대비율**: 4.5:1 (WCAG AA)
- **텍스트**: `text-gray-900` on `bg-white`
- **버튼**: `text-white` on `bg-blue-600`

#### 키보드 내비게이션
```tsx
// 포커스 관리
className="focus:outline-none focus:ring-2 focus:ring-blue-500"

// ARIA 레이블
<Button aria-label="구독 추가하기">
  <Plus className="w-5 h-5" />
</Button>
```

---

### 10. 아이콘 시스템

#### 아이콘 라이브러리
- **Primary**: Lucide React (`lucide-react`) - 일반 UI 아이콘
- **Secondary**: Heroicons (`@heroicons/react`) - 시스템 아이콘
- **Tertiary**: Radix Icons (`@radix-ui/react-icons`) - 상태 아이콘

#### 사이즈 가이드
| 크기 | 클래스 | 용도 |
|------|--------|------|
| **Small** | `w-4 h-4` | 인라인 아이콘 |
| **Medium** | `w-5 h-5` | 버튼 아이콘 |
| **Large** | `w-6 h-6` | 헤더 아이콘 |
| **XLarge** | `w-8 h-8` | 대형 액션 버튼 |

#### 주요 아이콘 컴포넌트
```tsx
// Lucide React 아이콘 (일반 UI)
import { 
  Home, Bell, User, Menu, Plus, Edit2, Trash2, 
  Calendar, Tag, CreditCard, Globe, Banknote, 
  CalendarRange, TrendingUp, Play, Pause, 
  Volume2, VolumeX, ChevronLeft, ChevronRight,
  Search, Settings, Download, Upload, Filter,
  MoreHorizontal, Eye, EyeOff, Lock, Unlock
} from 'lucide-react';

// Heroicons (시스템 아이콘)  
import { 
  CheckCircleIcon, XMarkIcon, ExclamationTriangleIcon,
  InformationCircleIcon, PhotoIcon, UserCircleIcon,
  Cog6ToothIcon, BellIcon, HomeIcon, PlusIcon,
  PencilIcon, TrashIcon, MagnifyingGlassIcon
} from '@heroicons/react/24/outline';

// Heroicons Solid (강조 아이콘)
import {
  CheckCircleIcon as CheckCircleSolid,
  XCircleIcon as XCircleSolid,
  ExclamationTriangleIcon as ExclamationTriangleSolid
} from '@heroicons/react/24/solid';

// Radix UI 아이콘 (상태 및 인터페이스)
import { 
  CheckIcon, Cross2Icon, CaretDownIcon, 
  DotFilledIcon, UpdateIcon, ChevronDownIcon,
  ChevronUpIcon, ArrowRightIcon, ArrowLeftIcon,
  QuestionMarkCircledIcon, InfoCircledIcon
} from '@radix-ui/react-icons';
```

#### 아이콘 사용 가이드라인
```tsx
// 성공 상태
<CheckCircleIcon className="w-5 h-5 text-green-500" />
<CheckIcon className="w-4 h-4 text-green-600" />

// 경고 상태  
<ExclamationTriangleIcon className="w-5 h-5 text-yellow-500" />
<QuestionMarkCircledIcon className="w-4 h-4 text-yellow-600" />

// 에러 상태
<XMarkIcon className="w-5 h-5 text-red-500" />
<Cross2Icon className="w-4 h-4 text-red-600" />

// 정보 상태
<InformationCircleIcon className="w-5 h-5 text-blue-500" />
<InfoCircledIcon className="w-4 h-4 text-blue-600" />
```

---

### 11. Tailwind UI 컴포넌트 시스템

#### Tailwind Plus UI Kit 활용
Moonwave는 Tailwind Plus 유료 구독을 통해 다음 프리미엄 컴포넌트들을 활용합니다:

#### Application UI Components
```tsx
// 프리미엄 테이블 컴포넌트
<div className="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
  <table className="min-w-full divide-y divide-gray-300">
    <thead className="bg-gray-50">
      <tr>
        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wide">
          구독 서비스
        </th>
      </tr>
    </thead>
  </table>
</div>

// 프리미엄 슬라이드오버
<div className="relative z-10" aria-labelledby="slide-over-title" role="dialog">
  <div className="fixed inset-0 overflow-hidden">
    <div className="absolute inset-0 overflow-hidden">
      <div className="pointer-events-none fixed inset-y-0 right-0 flex max-w-full pl-10">
        <div className="pointer-events-auto relative w-screen max-w-md">
          <div className="flex h-full flex-col overflow-y-scroll bg-white py-6 shadow-xl">
            {/* Content */}
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
```

#### Marketing UI Blocks
```tsx
// 프리미엄 Hero 섹션
<div className="relative overflow-hidden bg-white">
  <div className="mx-auto max-w-7xl">
    <div className="relative z-10 pb-8 bg-white sm:pb-16 md:pb-20 lg:max-w-2xl lg:w-full lg:pb-28 xl:pb-32">
      <svg className="hidden lg:block absolute right-0 inset-y-0 h-full w-48 text-white transform translate-x-1/2" 
           fill="currentColor" viewBox="0 0 100 100" preserveAspectRatio="none">
        <polygon points="50,0 100,0 50,100 0,100" />
      </svg>
      
      <div className="relative pt-6 px-4 sm:px-6 lg:px-8">
        <div className="mt-10 mx-auto max-w-7xl px-4 sm:mt-12 sm:px-6 md:mt-16 lg:mt-20 lg:px-8 xl:mt-28">
          <div className="sm:text-center lg:text-left">
            <h1 className="text-4xl tracking-tight font-extrabold text-gray-900 sm:text-5xl md:text-6xl">
              <span className="block xl:inline">구독 관리를</span>
              <span className="block text-blue-600 xl:inline">스마트하게</span>
            </h1>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

// 프리미엄 Features 섹션
<div className="py-12 bg-white">
  <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div className="lg:text-center">
      <h2 className="text-base text-blue-600 font-semibold tracking-wide uppercase">Features</h2>
      <p className="mt-2 text-3xl leading-8 font-extrabold tracking-tight text-gray-900 sm:text-4xl">
        더 나은 구독 관리 경험
      </p>
    </div>
    
    <div className="mt-10">
      <dl className="space-y-10 md:space-y-0 md:grid md:grid-cols-2 md:gap-x-8 md:gap-y-10">
        <div className="relative">
          <dt>
            <div className="absolute flex items-center justify-center h-12 w-12 rounded-md bg-blue-500 text-white">
              <BellIcon className="h-6 w-6" />
            </div>
            <p className="ml-16 text-lg leading-6 font-medium text-gray-900">알림 관리</p>
          </dt>
          <dd className="mt-2 ml-16 text-base text-gray-500">
            구독 갱신일을 놓치지 않도록 스마트한 알림을 제공합니다.
          </dd>
        </div>
      </dl>
    </div>
  </div>
</div>
```

#### Page Templates
```tsx
// 프리미엄 대시보드 레이아웃
<div className="min-h-full">
  <nav className="bg-gray-800">
    <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
      <div className="flex h-16 items-center justify-between">
        <div className="flex items-center">
          <div className="flex-shrink-0">
            <img className="h-8 w-8" src="/logo.svg" alt="Moonwave" />
          </div>
          <div className="hidden md:block">
            <div className="ml-10 flex items-baseline space-x-4">
              <a href="#" className="bg-gray-900 text-white px-3 py-2 rounded-md text-sm font-medium">
                대시보드
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </nav>

  <header className="bg-white shadow">
    <div className="mx-auto max-w-7xl px-4 py-6 sm:px-6 lg:px-8">
      <h1 className="text-3xl font-bold tracking-tight text-gray-900">구독 관리</h1>
    </div>
  </header>

  <main>
    <div className="mx-auto max-w-7xl py-6 sm:px-6 lg:px-8">
      {/* 대시보드 콘텐츠 */}
    </div>
  </main>
</div>
```

#### E-commerce UI Components
```tsx
// 프리미엄 결제 폼
<div className="bg-white">
  <div className="max-w-2xl mx-auto pt-16 pb-24 px-4 sm:px-6 lg:max-w-7xl lg:px-8">
    <h2 className="sr-only">Checkout</h2>
    
    <form className="lg:grid lg:grid-cols-2 lg:gap-x-12 xl:gap-x-16">
      <div>
        <div>
          <h2 className="text-lg font-medium text-gray-900">결제 정보</h2>
          
          <div className="mt-4 grid grid-cols-1 gap-y-6 sm:grid-cols-2 sm:gap-x-4">
            <div>
              <label htmlFor="first-name" className="block text-sm font-medium text-gray-700">
                이름
              </label>
              <div className="mt-1">
                <input type="text" id="first-name" 
                       className="block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" />
              </div>
            </div>
          </div>
        </div>
        
        <div className="mt-10 border-t border-gray-200 pt-10">
          <h2 className="text-lg font-medium text-gray-900">결제 수단</h2>
          
          <fieldset className="mt-4">
            <div className="space-y-4 sm:flex sm:items-center sm:space-y-0 sm:space-x-10">
              <div className="flex items-center">
                <input id="credit-card" name="payment-type" type="radio" 
                       className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300" />
                <label htmlFor="credit-card" className="ml-3 block text-sm font-medium text-gray-700">
                  신용카드
                </label>
              </div>
            </div>
          </fieldset>
        </div>
      </div>
      
      {/* 주문 요약 */}
      <div className="mt-10 lg:mt-0">
        <h2 className="text-lg font-medium text-gray-900">주문 요약</h2>
        
        <div className="mt-4 bg-white border border-gray-200 rounded-lg shadow-sm">
          <h3 className="sr-only">구독 서비스</h3>
          <div className="border-t border-gray-200 py-6 px-4 sm:px-6">
            <div className="flow-root">
              <ul role="list" className="-my-6 divide-y divide-gray-200">
                <li className="py-6 flex">
                  <div className="ml-4 flex-1 flex flex-col">
                    <div>
                      <div className="flex justify-between text-base font-medium text-gray-900">
                        <h3>Netflix Premium</h3>
                        <p className="ml-4">₩17,000</p>
                      </div>
                      <p className="mt-1 text-sm text-gray-500">월간 구독</p>
                    </div>
                  </div>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </form>
  </div>
</div>
```

#### 입력 필드 스타일
```css
.input-field {
  @apply w-full px-3 py-2 border border-gray-300 rounded-md 
         focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500;
}
```

---

### 12. 폼 디자인

#### 입력 필드 스타일
```css
.input-field {
  @apply w-full px-3 py-2 border border-gray-300 rounded-md 
         focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500;
}
```

#### Tailwind Plus 프리미엄 폼 컴포넌트
```tsx
// 고급 입력 그룹
<div className="space-y-6">
  <div>
    <label className="block text-sm font-medium text-gray-700">구독 서비스명</label>
    <div className="mt-1 relative rounded-md shadow-sm">
      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
        <TagIcon className="h-5 w-5 text-gray-400" />
      </div>
      <input type="text" 
             className="focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 sm:text-sm border-gray-300 rounded-md"
             placeholder="Netflix, Spotify..." />
    </div>
  </div>
  
  <div className="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
    <div className="sm:col-span-3">
      <label className="block text-sm font-medium text-gray-700">가격</label>
      <div className="mt-1 relative rounded-md shadow-sm">
        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <span className="text-gray-500 sm:text-sm">₩</span>
        </div>
        <input type="text" 
               className="focus:ring-blue-500 focus:border-blue-500 block w-full pl-7 pr-12 sm:text-sm border-gray-300 rounded-md"
               placeholder="0.00" />
        <div className="absolute inset-y-0 right-0 flex items-center">
          <select className="focus:ring-blue-500 focus:border-blue-500 h-full py-0 pl-2 pr-7 border-transparent bg-transparent text-gray-500 sm:text-sm rounded-md">
            <option>KRW</option>
            <option>USD</option>
            <option>EUR</option>
          </select>
        </div>
      </div>
    </div>
    
    <div className="sm:col-span-3">
      <label className="block text-sm font-medium text-gray-700">결제 주기</label>
      <select className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md">
        <option>월간</option>
        <option>연간</option>
        <option>주간</option>
      </select>
    </div>
  </div>
</div>
```

#### 버튼 변형
```tsx
// Primary Button (Tailwind Plus Enhanced)
<button className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
  <PlusIcon className="-ml-1 mr-2 h-5 w-5" />
  구독 추가
</button>

// Secondary Button
<button className="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
  취소
</button>

// Destructive Button
<button className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
  <TrashIcon className="-ml-1 mr-2 h-5 w-5" />
  삭제
</button>

// Loading Button State
<button disabled className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 opacity-75 cursor-not-allowed">
  <UpdateIcon className="animate-spin -ml-1 mr-2 h-5 w-5" />
  처리중...
</button>
```

---

### 13. 그림자 시스템

#### Tailwind Plus 고급 그림자
```css
/* 기본 그림자 */
.shadow-soft {
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
}

/* 글로우 효과 */
.shadow-glow {
  box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
}

/* 프리미엄 카드 그림자 */
.shadow-premium {
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
}

/* 인너 그림자 */
.shadow-inner-premium {
  box-shadow: inset 0 2px 4px 0 rgba(0, 0, 0, 0.06);
}

/* 컬러 그림자 */
.shadow-blue {
  box-shadow: 0 4px 14px 0 rgba(59, 130, 246, 0.39);
}

.shadow-purple {
  box-shadow: 0 4px 14px 0 rgba(147, 51, 234, 0.39);
}
```

#### 그림자 적용 예시
```tsx
// 프리미엄 카드 컴포넌트
<div className="bg-white overflow-hidden shadow-premium rounded-lg">
  <div className="px-4 py-5 sm:p-6">
    {/* 카드 콘텐츠 */}
  </div>
</div>

// 호버 그림자 효과
<div className="transition-shadow duration-300 ease-in-out shadow-soft hover:shadow-premium">
  {/* 호버 시 그림자 강화 */}
</div>

// 글로우 버튼
<button className="shadow-blue hover:shadow-glow transition-shadow duration-200">
  특별 액션
</button>
```

---

### 14. 프리미엄 레이아웃 패턴

#### Tailwind Plus 고급 그리드 시스템
```tsx
// 복합 대시보드 레이아웃
<div className="min-h-screen bg-gray-50">
  <div className="flex h-screen overflow-hidden">
    {/* 사이드바 */}
    <div className="hidden md:flex md:flex-shrink-0">
      <div className="flex flex-col w-64">
        <div className="flex flex-col h-0 flex-1 border-r border-gray-200 bg-white">
          <div className="flex-1 flex flex-col pt-5 pb-4 overflow-y-auto">
            <nav className="mt-5 flex-1 px-2 space-y-1">
              {/* 네비게이션 아이템들 */}
            </nav>
          </div>
        </div>
      </div>
    </div>
    
    {/* 메인 콘텐츠 */}
    <div className="flex flex-col w-0 flex-1 overflow-hidden">
      <div className="relative z-10 flex-shrink-0 flex h-16 bg-white shadow">
        {/* 헤더 */}
      </div>
      
      <main className="flex-1 relative overflow-y-auto focus:outline-none">
        <div className="py-6">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 md:px-8">
            {/* 페이지 콘텐츠 */}
          </div>
        </div>
      </main>
    </div>
  </div>
</div>

// 고급 그리드 레이아웃
<div className="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
  {/* 반응형 카드 그리드 */}
</div>

// 마스터-디테일 레이아웃
<div className="lg:grid lg:grid-cols-12 lg:gap-x-5">
  <aside className="py-6 px-2 sm:px-6 lg:py-0 lg:px-0 lg:col-span-3">
    {/* 사이드 패널 */}
  </aside>
  
  <div className="space-y-6 sm:px-6 lg:px-0 lg:col-span-9">
    {/* 메인 콘텐츠 */}
  </div>
</div>
```

#### 프리미엄 모달 및 오버레이
```tsx
// 고급 모달 컴포넌트
<div className="fixed z-10 inset-0 overflow-y-auto">
  <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
    <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>
    
    <span className="hidden sm:inline-block sm:align-middle sm:h-screen">&#8203;</span>
    
    <div className="relative inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
      <div>
        <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100">
          <CheckIcon className="h-6 w-6 text-green-600" />
        </div>
        <div className="mt-3 text-center sm:mt-5">
          <h3 className="text-lg leading-6 font-medium text-gray-900">
            구독이 추가되었습니다
          </h3>
          <div className="mt-2">
            <p className="text-sm text-gray-500">
              새로운 구독 서비스가 성공적으로 등록되었습니다.
            </p>
          </div>
        </div>
      </div>
      <div className="mt-5 sm:mt-6 sm:grid sm:grid-cols-2 sm:gap-3 sm:grid-flow-row-dense">
        <button className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:col-start-2 sm:text-sm">
          확인
        </button>
        <button className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:col-start-1 sm:text-sm">
          취소
        </button>
      </div>
    </div>
  </div>
</div>
```

---

## 개발 가이드라인

### Utility-First 프로젝트 구조
```
src/
├── components/
│   ├── ui/              # 재사용 가능한 UI 컴포넌트
│   │   ├── Button.tsx   # 추상화된 버튼 컴포넌트
│   │   ├── Card.tsx     # 카드 컴포넌트
│   │   └── Input.tsx    # 입력 컴포넌트
│   ├── layout/          # 레이아웃 컴포넌트
│   └── features/        # 기능별 컴포넌트
├── styles/
│   ├── globals.css      # Tailwind imports & 커스텀 스타일
│   └── components.css   # @apply를 사용한 컴포넌트 클래스
├── utils/
│   └── cn.ts           # 클래스 조합 유틸리티
└── tailwind.config.js   # Tailwind 설정
```

### Utility-First 베스트 프랙티스

#### 1. 컴포넌트 추상화 시점
```tsx
// 🟡 언제 컴포넌트로 추상화할 것인가?
// - 3번 이상 반복되는 패턴
// - 5개 이상의 유틸리티 클래스 조합
// - 복잡한 상태나 로직이 포함된 경우

// ❌ 너무 이른 추상화
<div className="p-4">Simple content</div>

// ✅ 적절한 시점의 추상화
const Card = ({ children, variant = 'default' }) => {
  const variants = {
    default: 'bg-white border border-gray-200 rounded-xl shadow-sm',
    highlighted: 'bg-blue-50 border border-blue-200 rounded-xl shadow-md',
    error: 'bg-red-50 border border-red-200 rounded-xl shadow-md'
  };
  
  return (
    <div className={`p-6 transition-all duration-200 hover:shadow-lg ${variants[variant]}`}>
      {children}
    </div>
  );
};
```

#### 2. 클래스 네이밍 및 조직화
```tsx
// 클래스 조합 유틸리티 (utils/cn.ts)
import { clsx, type ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

// 사용 예시
const Button = ({ className, variant, size, ...props }) => {
  return (
    <button
      className={cn(
        // 기본 스타일
        'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors',
        'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
        'disabled:opacity-50 disabled:pointer-events-none',
        
        // Variant 스타일
        {
          'bg-primary text-primary-foreground hover:bg-primary/90': variant === 'default',
          'bg-destructive text-destructive-foreground hover:bg-destructive/90': variant === 'destructive',
          'border border-input hover:bg-accent hover:text-accent-foreground': variant === 'outline',
        },
        
        // Size 스타일
        {
          'h-10 px-4 py-2': size === 'default',
          'h-9 rounded-md px-3': size === 'sm',
          'h-11 rounded-md px-8': size === 'lg',
        },
        
        className
      )}
      {...props}
    />
  );
};
```

#### 3. 반응형 Utility 전략
```tsx
// 모바일 우선 설계
const ResponsiveGrid = ({ children }) => (
  <div className="
    grid gap-4
    grid-cols-1           // Mobile: 1열
    sm:grid-cols-2        // Tablet: 2열
    lg:grid-cols-3        // Desktop: 3열
    xl:grid-cols-4        // Large: 4열
    2xl:grid-cols-5       // Extra Large: 5열
  ">
    {children}
  </div>
);

// 컨테이너 쿼리와 뷰포트 반응형 조합
const AdaptiveCard = ({ title, content, image }) => (
  <div className="@container">
    <div className="
      bg-white rounded-lg shadow-sm border border-gray-200
      p-4 sm:p-6                    // 뷰포트 기반 패딩
      @lg:p-8                       // 컨테이너 기반 패딩
      hover:shadow-lg transition-shadow
    ">
      <div className="
        flex flex-col
        @md:flex-row                 // 컨테이너가 충분할 때 가로 배치
        gap-4 @md:gap-6
      ">
        {image && (
          <img 
            src={image} 
            alt={title}
            className="
              w-full @md:w-32 @lg:w-48
              h-48 @md:h-32 @lg:h-48
              object-cover rounded
            "
          />
        )}
        <div className="flex-1">
          <h3 className="
            text-lg @lg:text-xl
            font-semibold text-gray-900 mb-2
          ">
            {title}
          </h3>
          <p className="
            text-sm @lg:text-base
            text-gray-600 line-clamp-3
          ">
            {content}
          </p>
        </div>
      </div>
    </div>
  </div>
);
```

#### 4. 성능 고려사항
```tsx
// 동적 스타일 최적화
const StatusBadge = ({ status }) => {
  // ❌ 동적 문자열 연결 (PurgeCSS에서 제거될 수 있음)
  // const bgClass = `bg-${status}-100`;
  
  // ✅ 명시적 매핑
  const statusStyles = {
    success: 'bg-green-100 text-green-800 border-green-200',
    warning: 'bg-yellow-100 text-yellow-800 border-yellow-200',
    error: 'bg-red-100 text-red-800 border-red-200',
    info: 'bg-blue-100 text-blue-800 border-blue-200'
  };
  
  return (
    <span className={cn(
      'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border',
      statusStyles[status] || statusStyles.info
    )}>
      {status}
    </span>
  );
};

// 조건부 렌더링 최적화
const ConditionalStyles = ({ isActive, size, className }) => (
  <div 
    className={cn(
      'rounded-lg transition-all duration-200',
      
      // 조건부 스타일을 객체로 정리
      {
        'bg-blue-500 text-white shadow-lg': isActive,
        'bg-gray-100 text-gray-700': !isActive,
        'p-2 text-sm': size === 'small',
        'p-4 text-base': size === 'medium', 
        'p-6 text-lg': size === 'large'
      },
      
      className
    )}
  >
    Content
  </div>
);
```

#### 5. Tailwind + TypeScript 타입 안전성
```typescript
// 타입 안전한 variant 시스템
type ButtonVariant = 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';
type ButtonSize = 'default' | 'sm' | 'lg' | 'icon';

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: ButtonVariant;
  size?: ButtonSize;
  asChild?: boolean;
}

// 스타일 매핑을 상수로 정의
const buttonVariants = {
  variant: {
    default: 'bg-primary text-primary-foreground hover:bg-primary/90',
    destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
    outline: 'border border-input hover:bg-accent hover:text-accent-foreground',
    secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
    ghost: 'hover:bg-accent hover:text-accent-foreground',
    link: 'text-primary underline-offset-4 hover:underline'
  },
  size: {
    default: 'h-10 px-4 py-2',
    sm: 'h-9 rounded-md px-3',
    lg: 'h-11 rounded-md px-8',
    icon: 'h-10 w-10'
  }
} as const;

// CVA (Class Variance Authority) 라이브러리 활용
import { cva, type VariantProps } from 'class-variance-authority';

const buttonVariants = cva(
  'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90',
        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
        outline: 'border border-input hover:bg-accent hover:text-accent-foreground',
      },
      size: {
        default: 'h-10 px-4 py-2',
        sm: 'h-9 rounded-md px-3',
        lg: 'h-11 rounded-md px-8',
      }
    },
    defaultVariants: {
      variant: 'default',
      size: 'default'
    }
  }
);

export interface ButtonProps 
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {}

export const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, ...props }, ref) => {
    return (
      <button
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);
```

#### 컴포넌트 명명 규칙
- **PascalCase**: 컴포넌트명 (`StatsCard`, `HeaderButton`, `PremiumModal`)
- **camelCase**: Props 및 함수명 (`onHomeClick`, `notificationCount`)
- **kebab-case**: CSS 클래스명 (`premium-card`, `glass-effect`)

#### CSS 클래스 우선순위
1. **Tailwind Utilities**: 기본 스타일링 (`bg-blue-600`, `text-white`)
2. **Container Queries**: 컨테이너 기반 반응형 (`@lg:text-xl`, `@md/card:flex-row`)
3. **Tailwind Plus Components**: 프리미엄 컴포넌트 패턴
4. **Custom Classes**: 특수 효과 (`.glass-effect`, `.gradient-text`)
5. **Component Variants**: 변형 스타일

#### 성능 최적화 with Container Queries
- **JIT (Just-In-Time)**: 사용된 클래스만 번들에 포함
- **Container-aware Components**: 컨테이너 크기에 따른 지능형 렌더링
- **Component Extraction**: 반복되는 컨테이너 패턴을 컴포넌트로 추출
- **Purge CSS**: 미사용 컨테이너 쿼리 스타일 자동 제거
- **Critical CSS**: 초기 렌더링에 필요한 컨테이너 스타일 우선 로드

```tsx
// Container Queries + Tailwind Plus 최적화 패턴
const ResponsivePremiumCard = () => {
  return (
    <div className="@container/premium-card">
      {/* 기본 카드 구조 (Tailwind Plus 패턴) */}
      <div className="bg-white overflow-hidden shadow-premium rounded-lg @lg/premium-card:shadow-xl transition-shadow duration-300">
        {/* 헤더 - Container Query 반응형 */}
        <div className="@md/premium-card:px-6 px-4 @md/premium-card:py-5 py-4 border-b border-gray-200">
          <div className="flex @lg/premium-card:flex-row flex-col @lg/premium-card:items-center @lg/premium-card:justify-between">
            <h3 className="@lg/premium-card:text-lg text-base font-medium text-gray-900 @lg/premium-card:mb-0 mb-2">
              구독 관리
            </h3>
            <div className="@lg/premium-card:ml-4 flex-shrink-0">
              <button className="@md/premium-card:px-4 px-3 @md/premium-card:py-2 py-1.5 @md/premium-card:text-sm text-xs bg-blue-600 text-white rounded-md hover:bg-blue-700">
                <span className="@lg/premium-card:inline hidden">새 구독 </span>추가
              </button>
            </div>
          </div>
        </div>
        
        {/* 콘텐츠 - 컨테이너 크기에 따른 레이아웃 */}
        <div className="@md/premium-card:px-6 px-4 @md/premium-card:py-5 py-4">
          <div className="grid @2xl/premium-card:grid-cols-3 @lg/premium-card:grid-cols-2 grid-cols-1 @lg/premium-card:gap-6 gap-4">
            {/* 반응형 그리드 아이템들 */}
          </div>
        </div>
        
        {/* 푸터 - 조건부 표시 */}
        <div className="@lg/premium-card:block hidden bg-gray-50 px-6 py-3">
          <div className="@xl/premium-card:flex @xl/premium-card:items-center @xl/premium-card:justify-between">
            <p className="text-sm text-gray-500">총 12개의 구독 서비스</p>
            <p className="@xl/premium-card:mt-0 mt-2 text-sm font-medium text-gray-900">월 ₩89,000</p>
          </div>
        </div>
      </div>
    </div>
  );
};

// 고급 Container Query 패턴 with Tailwind Plus
const AdaptiveDashboard = () => {
  return (
    <div className="@container/dashboard min-h-screen bg-gray-50">
      {/* Tailwind Plus Navigation + Container Queries */}
      <nav className="bg-white shadow-sm border-b">
        <div className="@4xl/dashboard:max-w-7xl @4xl/dashboard:mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex @lg/dashboard:h-16 h-14 items-center justify-between">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <h1 className="@lg/dashboard:text-xl text-lg font-semibold text-gray-900">Moonwave</h1>
              </div>
              <div className="@xl/dashboard:block hidden ml-10">
                <div className="flex items-baseline space-x-4">
                  <a href="#" className="@2xl/dashboard:px-3 px-2 py-2 text-sm font-medium text-gray-900 hover:text-blue-600">
                    대시보드
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </nav>
      
      {/* 메인 레이아웃 - Container 기반 사이드바 */}
      <div className="flex @3xl/dashboard:flex-row flex-col">
        <aside className="@3xl/dashboard:w-64 w-full @3xl/dashboard:flex-shrink-0 bg-white @3xl/dashboard:shadow-sm @3xl/dashboard:border-r">
          <div className="@3xl/dashboard:py-6 py-4 @3xl/dashboard:px-6 px-4">
            {/* 사이드바 콘텐츠 */}
          </div>
        </aside>
        
        <main className="@container/main flex-1 @3xl/dashboard:overflow-hidden">
          <div className="@lg/main:p-8 p-4">
            {/* 적응형 그리드 */}
            <div className="grid @5xl/main:grid-cols-4 @3xl/main:grid-cols-3 @lg/main:grid-cols-2 grid-cols-1 gap-6">
              {/* 컨테이너 크기에 따른 카드 배치 */}
            </div>
          </div>
        </main>
      </div>
    </div>
  );
};
```

---

## 브랜드 아이덴티티

### Moonwave 디자인 언어 (Tailwind Plus Enhanced)
- **Flow**: 물결처럼 자연스러운 사용자 여정 (프리미엄 애니메이션 활용)
- **Clarity**: 명확한 정보 계층과 직관적 인터페이스 (Tailwind Plus 타이포그래피)
- **Trust**: 안정감을 주는 블루 계열과 소프트한 그라디언트 (프리미엄 컬러 팔레트)
- **Efficiency**: 최소한의 클릭으로 최대한의 기능 접근 (최적화된 UX 패턴)

### 프리미엄 디자인 토큰
```css
/* Tailwind Plus 확장 컬러 시스템 */
:root {
  /* Primary Brand Colors */
  --brand-blue-50: #eff6ff;
  --brand-blue-500: #3b82f6;
  --brand-blue-600: #2563eb;
  --brand-blue-900: #1e3a8a;
  
  /* Secondary Colors */
  --brand-purple-500: #8b5cf6;
  --brand-purple-600: #7c3aed;
  
  /* Semantic Colors */
  --success-green: #10b981;
  --warning-yellow: #f59e0b;
  --error-red: #ef4444;
  
  /* Glass Effect Variables */
  --glass-bg: rgba(255, 255, 255, 0.8);
  --glass-border: rgba(255, 255, 255, 0.2);
  --glass-backdrop: blur(12px);
}
```

### 미래 확장성 (Tailwind Plus + Container Queries)
- **다크모드 지원**: Tailwind Plus의 고급 다크모드 패턴 + 컨테이너별 테마 전환
- **다국어 지원**: 국제화를 고려한 컨테이너 기반 레이아웃 시스템
- **모바일 앱 확장**: Container Queries를 활용한 크로스 플랫폼 컴포넌트
- **접근성 강화**: 컨테이너 크기에 따른 a11y 최적화

### Container Queries + Tailwind Plus 고급 패턴
```tsx
// 다크모드 + Container Queries
<div className="@container/theme dark:bg-gray-900 bg-white">
  <div className="@lg/theme:p-8 p-4 dark:@lg/theme:border-gray-700 @lg/theme:border-gray-200 border">
    <h2 className="@md/theme:text-2xl text-xl dark:text-white text-gray-900 @lg/theme:mb-6 mb-4">
      구독 관리
    </h2>
  </div>
</div>

// 국제화 + Container Queries (텍스트 길이 대응)
<div className="@container/i18n" dir="auto">
  <div className="@lg/i18n:flex-row flex flex-col @lg/i18n:items-center @lg/i18n:gap-6 gap-4">
    <h1 className="@lg/i18n:text-3xl text-2xl font-bold @lg/i18n:min-w-0 truncate">
      {/* 언어별 텍스트 길이에 따른 적응형 레이아웃 */}
      구독 관리 서비스 / Subscription Management / サブスクリプション管理
    </h1>
  </div>
</div>

// 접근성 + Container Queries
<div className="@container/a11y focus-within:@lg/a11y:ring-4 focus-within:ring-2 ring-blue-500">
  <button className="@md/a11y:text-base text-sm @md/a11y:px-6 px-4 @md/a11y:py-3 py-2 
                   bg-blue-600 text-white rounded-md 
                   focus:@lg/a11y:outline-offset-4 focus:outline-offset-2">
    <span className="@lg/a11y:inline hidden">구독 서비스를 </span>추가하기
  </button>
</div>

// 고급 애니메이션 + Container Queries
<div className="@container/animation transform transition-all duration-500 
              @lg/animation:hover:scale-105 hover:scale-102 
              @lg/animation:hover:rotate-1 hover:rotate-0">
  <div className="@md/animation:bg-gradient-to-r bg-gradient-to-b 
                from-blue-400 via-blue-500 to-blue-600 
                @lg/animation:hover:from-blue-500 hover:from-blue-400
                @lg/animation:hover:via-blue-600 hover:via-blue-500
                @lg/animation:hover:to-blue-700 hover:to-blue-600
                @md/animation:p-6 p-4 rounded-lg text-white">
    <h3 className="@lg/animation:text-2xl @md/animation:text-xl text-lg font-bold">
      동적 컨테이너 효과
    </h3>
  </div>
</div>

// 프리미엄 그리드 시스템 + Container Queries
<div className="@container/premium-grid grid gap-px bg-gray-200 
              @6xl/premium-grid:grid-cols-6 
              @4xl/premium-grid:grid-cols-4 
              @2xl/premium-grid:grid-cols-3 
              @lg/premium-grid:grid-cols-2 
              grid-cols-1">
  <div className="bg-white @md/premium-grid:p-6 p-4 
                @lg/premium-grid:hover:shadow-lg hover:shadow-md 
                transition-shadow duration-200">
    <div className="@lg/premium-grid:h-32 h-24 bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg
                  @md/premium-grid:mb-4 mb-3 flex items-center justify-center">
      <div className="@lg/premium-grid:w-12 @lg/premium-grid:h-12 w-8 h-8 bg-blue-500 rounded-full"></div>
    </div>
    <h4 className="@lg/premium-grid:text-lg text-base font-semibold @md/premium-grid:mb-2 mb-1">
      서비스명
    </h4>
    <p className="@lg/premium-grid:text-sm text-xs text-gray-500 @lg/premium-grid:line-clamp-3 line-clamp-2">
      컨테이너 크기에 따라 조정되는 설명 텍스트
    </p>
  </div>
</div>
```
