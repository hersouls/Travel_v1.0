# 시스템 아키텍처 설계서 – 모바일 여행 플래너 웹서비스

## 1. 전체 구조 개요

- **클라이언트:**  
  - Next.js(React 기반) SPA/PWA  
  - 모바일 최적화 UI, 브라우저(Chrome/Safari) 대응  
  - Google Maps/Places API 연동  
- **서버:**  
  - Node.js/Express 또는 Next.js API Route  
  - 인증(JWT), RESTful API 제공  
  - 외부 API Proxy, 데이터 검증/캐싱
- **DB/스토리지:**  
  - Cloud DB(Firebase Firestore, Supabase, 등)  
  - 이미지: Cloud Storage(S3, Firebase Storage)  
- **외부 서비스:**  
  - Google Maps & Places API (장소검색/지도/상세정보)  
  - (옵션) 이메일 인증, 소셜 로그인 등

## 2. 데이터 흐름

1. 클라이언트 → 서버:  
   - 로그인/회원가입, Trip/Plan CRUD 요청
2. 서버 → DB:  
   - Trip/Plan 데이터 저장/조회/수정/삭제
3. 클라이언트 → Google API:  
   - 장소 자동완성, 상세정보, 지도 렌더링 등 직접 호출(Proxy/백엔드 처리 가능)
4. 이미지 업로드:  
   - 클라이언트 → 서버 → Cloud Storage 업로드(최종 URL DB 저장)
5. 푸시알림/알림(확장):  
   - 서버 → FCM, Email 등 연동

## 3. 주요 컴포넌트

- **프론트엔드**  
  - 로그인/회원가입, 여행일정카드 목록/생성/상세, 여행계획카드 관리, 장소검색/지도 뷰, 설정/프로필 등
- **백엔드**  
  - 사용자 관리/인증, Trip/Plan API, 이미지 업로드/관리, Google API Proxy, 통계/로깅 등
- **DB/스토리지**  
  - 사용자, Trip, Plan, 파일(이미지) 테이블
- **외부 연동**  
  - Google Place/Maps API, OAuth(확장), 알림, 데이터 백업 등

## 4. 기술스택(예시)

- **프론트엔드:** Next.js, React, TypeScript, TailwindCSS, Google Maps JS SDK
- **백엔드:** Node.js, Express/Next.js API, JWT, REST/GraphQL
- **DB:** Firebase, Supabase(Postgres), MongoDB(선택)
- **스토리지:** Firebase Storage, AWS S3
- **DevOps:** Vercel, GitHub Actions, Slack/Email Alert(확장)

---

(※ 실제 프로젝트에서는 상세 네트워크 다이어그램, 컴포넌트별 시퀀스/ERD 연동, API 문서와 함께 작성)