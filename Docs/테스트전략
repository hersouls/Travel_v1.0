## 요약
Moonwave Travel의 테스트 전략 문서를 작성합니다. "가짜 흐름이 아닌, 실제 흐름"의 원칙에 따라 Mock 데이터를 최소화하고 실제 Supabase 테스트 환경을 활용하는 전략을 수립합니다.

## 분석
테스트 전략의 핵심 과제:
- **Mock 금지 원칙**: 실제 Supabase 테스트 DB 사용
- **Next.js Static Export**: 서버 컴포넌트 테스트 고려
- **실시간 동기화**: WebSocket 기반 기능 테스트
- **UI 특화 요소**: Container Queries, Pretendard 폰트

## 실행

# Moonwave Travel 테스트 전략 문서 v1.0

> "가짜 흐름이 아닌, 실제 흐름으로 설계한다" - 실제 데이터 기반 테스트 전략

## 📋 목차
1. [테스트 철학 및 원칙](#1-테스트-철학-및-원칙)
2. [테스트 환경 설정](#2-테스트-환경-설정)
3. [단위 테스트 전략](#3-단위-테스트-전략)
4. [통합 테스트 전략](#4-통합-테스트-전략)
5. [E2E 테스트 전략](#5-e2e-테스트-전략)
6. [시각적 회귀 테스트](#6-시각적-회귀-테스트)
7. [성능 테스트](#7-성능-테스트)
8. [테스트 커버리지 목표](#8-테스트-커버리지-목표)

---

## 1. 테스트 철학 및 원칙

### 1.1 Moonwave 테스트 원칙

```typescript
const MOONWAVE_TEST_PRINCIPLES = {
  // 실제 데이터 원칙
  realDataFirst: "Mock 대신 Supabase 테스트 환경 사용",
  
  // 사용자 중심 테스트
  userCentric: "실제 사용자 시나리오 기반 테스트",
  
  // 시각적 품질
  visualQuality: "Pretendard 폰트, Container Queries 검증",
  
  // 실시간 검증
  realtimeValidation: "WebSocket 기반 동기화 테스트"
} as const;
```

### 1.2 테스트 피라미드

```
         E2E (10%)
      /            \
    통합 테스트 (30%)
   /                \
 단위 테스트 (60%)
```

---

## 2. 테스트 환경 설정

### 2.1 Supabase 테스트 환경

```typescript
// test/setup/supabase-test.ts
import { createClient } from '@supabase/supabase-js';

// 테스트 전용 Supabase 프로젝트 사용
const supabaseTest = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_TEST_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_TEST_ANON_KEY!
);

// 테스트 데이터 초기화
export async function setupTestDatabase() {
  // 테스트 사용자 생성
  const { data: { user } } = await supabaseTest.auth.signUp({
    email: 'test@moonwave.kr',
    password: 'test-password-123'
  });

  // 테스트 여행 데이터
  const testTravel = {
    user_id: user!.id,
    title: '제주도 테스트 여행',
    destination: '제주도',
    start_date: '2025-08-15',
    end_date: '2025-08-20',
    status: 'planning'
  };

  const { data: travel } = await supabaseTest
    .from('travel_plans')
    .insert(testTravel)
    .select()
    .single();

  return { user, travel };
}

// 테스트 후 정리
export async function cleanupTestDatabase(userId: string) {
  // CASCADE DELETE로 관련 데이터 모두 삭제
  await supabaseTest
    .from('profiles')
    .delete()
    .eq('id', userId);
}
```

### 2.2 테스트 환경 설정 파일

```javascript
// jest.config.js
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'jsdom',
  setupFilesAfterEnv: ['<rootDir>/test/setup/jest.setup.ts'],
  moduleNameMapper: {
    '^@/(.*)$': '<rootDir>/src/$1',
    '^@/components/(.*)$': '<rootDir>/components/$1',
  },
  transform: {
    '^.+\\.(ts|tsx)$': ['ts-jest', {
      tsconfig: {
        jsx: 'react'
      }
    }]
  },
  testPathIgnorePatterns: ['/node_modules/', '/.next/'],
  collectCoverageFrom: [
    'components/**/*.{ts,tsx}',
    'hooks/**/*.{ts,tsx}',
    'lib/**/*.{ts,tsx}',
    '!**/*.d.ts',
    '!**/node_modules/**',
  ]
};
```

```typescript
// test/setup/jest.setup.ts
import '@testing-library/jest-dom';
import { loadEnvConfig } from '@next/env';

// 테스트 환경 변수 로드
loadEnvConfig(process.cwd());

// Container Queries 폴리필
global.ResizeObserver = jest.fn().mockImplementation(() => ({
  observe: jest.fn(),
  unobserve: jest.fn(),
  disconnect: jest.fn(),
}));

// Pretendard 폰트 모킹
jest.mock('next/font/local', () => ({
  default: () => ({
    className: 'font-pretendard',
    variable: '--font-pretendard'
  })
}));
```

---

## 3. 단위 테스트 전략

### 3.1 컴포넌트 테스트

```typescript
// components/features/travel/__tests__/TravelCard.test.tsx
import { render, screen, fireEvent } from '@testing-library/react';
import { TravelCard } from '../TravelCard';
import { mockTravel } from '@/test/fixtures/travel';

describe('TravelCard', () => {
  it('여행 정보가 올바르게 표시되어야 함', () => {
    render(<TravelCard travel={mockTravel} />);
    
    expect(screen.getByText('제주도 여행')).toBeInTheDocument();
    expect(screen.getByText('제주도')).toBeInTheDocument();
    expect(screen.getByText('2025년 8월 15일 - 8월 20일')).toBeInTheDocument();
  });

  it('Pretendard 폰트 클래스가 적용되어야 함', () => {
    const { container } = render(<TravelCard travel={mockTravel} />);
    
    expect(container.firstChild).toHaveClass('font-pretendard');
    expect(container.querySelector('.tracking-korean-tight')).toBeInTheDocument();
  });

  it('Container Query 클래스가 적용되어야 함', () => {
    const { container } = render(<TravelCard travel={mockTravel} />);
    
    expect(container.firstChild).toHaveClass('@container/travel-card');
    expect(container.querySelector('.@lg/travel-card\\:flex-row')).toBeInTheDocument();
  });

  it('클릭 시 상세 페이지로 이동해야 함', () => {
    const onClickMock = jest.fn();
    render(<TravelCard travel={mockTravel} onClick={onClickMock} />);
    
    fireEvent.click(screen.getByRole('article'));
    expect(onClickMock).toHaveBeenCalledWith(mockTravel.id);
  });
});
```

### 3.2 커스텀 훅 테스트

```typescript
// hooks/__tests__/useTravelPlans.test.tsx
import { renderHook, waitFor } from '@testing-library/react';
import { useTravelPlans } from '../useTravelPlans';
import { SupabaseProvider } from '@/components/providers/SupabaseProvider';
import { setupTestDatabase, cleanupTestDatabase } from '@/test/setup/supabase-test';

describe('useTravelPlans', () => {
  let testUser: any;
  let testTravel: any;

  beforeEach(async () => {
    const setup = await setupTestDatabase();
    testUser = setup.user;
    testTravel = setup.travel;
  });

  afterEach(async () => {
    await cleanupTestDatabase(testUser.id);
  });

  it('실제 Supabase 데이터를 가져와야 함', async () => {
    const wrapper = ({ children }: { children: React.ReactNode }) => (
      <SupabaseProvider>{children}</SupabaseProvider>
    );

    const { result } = renderHook(() => useTravelPlans(), { wrapper });

    // 로딩 상태
    expect(result.current.loading).toBe(true);

    // 데이터 로드 대기
    await waitFor(() => {
      expect(result.current.loading).toBe(false);
    });

    // 실제 데이터 검증
    expect(result.current.travelPlans).toHaveLength(1);
    expect(result.current.travelPlans[0].title).toBe('제주도 테스트 여행');
  });

  it('실시간 업데이트를 수신해야 함', async () => {
    const wrapper = ({ children }: { children: React.ReactNode }) => (
      <SupabaseProvider>{children}</SupabaseProvider>
    );

    const { result } = renderHook(() => useTravelPlans(), { wrapper });

    await waitFor(() => {
      expect(result.current.loading).toBe(false);
    });

    // 새 여행 추가
    await supabaseTest
      .from('travel_plans')
      .insert({
        user_id: testUser.id,
        title: '부산 테스트 여행',
        destination: '부산',
        start_date: '2025-09-01',
        end_date: '2025-09-03'
      });

    // 실시간 업데이트 대기
    await waitFor(() => {
      expect(result.current.travelPlans).toHaveLength(2);
    });
  });
});
```

### 3.3 유틸리티 함수 테스트

```typescript
// lib/utils/__tests__/formatters.test.ts
import { formatDate, formatCurrency, formatDuration } from '../formatters';

describe('formatters', () => {
  describe('formatDate', () => {
    it('한국어 날짜 형식으로 변환해야 함', () => {
      expect(formatDate('2025-08-15')).toBe('2025년 8월 15일');
      expect(formatDate('2025-12-25')).toBe('2025년 12월 25일');
    });
  });

  describe('formatCurrency', () => {
    it('한국 원화 형식으로 변환해야 함', () => {
      expect(formatCurrency(50000, 'KRW')).toBe('₩50,000');
      expect(formatCurrency(1234567, 'KRW')).toBe('₩1,234,567');
    });

    it('달러 형식으로 변환해야 함', () => {
      expect(formatCurrency(99.99, 'USD')).toBe('$99.99');
    });
  });
});
```

---

## 4. 통합 테스트 전략

### 4.1 API 통합 테스트

```typescript
// __tests__/integration/travel-api.test.ts
import { createClient } from '@supabase/supabase-js';
import { setupTestDatabase, cleanupTestDatabase } from '@/test/setup/supabase-test';

describe('Travel API Integration', () => {
  let supabase: any;
  let testUser: any;

  beforeAll(async () => {
    supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_TEST_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_TEST_ANON_KEY!
    );
    
    const setup = await setupTestDatabase();
    testUser = setup.user;
  });

  afterAll(async () => {
    await cleanupTestDatabase(testUser.id);
  });

  describe('여행 CRUD 플로우', () => {
    it('여행 생성 → 조회 → 수정 → 삭제 전체 플로우가 작동해야 함', async () => {
      // 1. 생성
      const { data: created, error: createError } = await supabase
        .from('travel_plans')
        .insert({
          user_id: testUser.id,
          title: '통합 테스트 여행',
          destination: '서울',
          start_date: '2025-10-01',
          end_date: '2025-10-05'
        })
        .select()
        .single();

      expect(createError).toBeNull();
      expect(created.title).toBe('통합 테스트 여행');

      // 2. 조회
      const { data: fetched } = await supabase
        .from('travel_plans')
        .select('*')
        .eq('id', created.id)
        .single();

      expect(fetched.title).toBe('통합 테스트 여행');

      // 3. 수정
      const { data: updated } = await supabase
        .from('travel_plans')
        .update({ title: '수정된 여행' })
        .eq('id', created.id)
        .select()
        .single();

      expect(updated.title).toBe('수정된 여행');

      // 4. 삭제
      const { error: deleteError } = await supabase
        .from('travel_plans')
        .delete()
        .eq('id', created.id);

      expect(deleteError).toBeNull();
    });
  });

  describe('Day별 계획 통합', () => {
    it('여행 생성 시 Day가 자동 생성되어야 함', async () => {
      const { data: travel } = await supabase
        .from('travel_plans')
        .insert({
          user_id: testUser.id,
          title: 'Day 테스트 여행',
          destination: '제주도',
          start_date: '2025-08-15',
          end_date: '2025-08-17'
        })
        .select()
        .single();

      // Day 자동 생성 로직 실행
      const days = [];
      for (let i = 0; i < 3; i++) {
        const date = new Date('2025-08-15');
        date.setDate(date.getDate() + i);
        
        days.push({
          travel_plan_id: travel.id,
          day_number: i + 1,
          date: date.toISOString().split('T')[0]
        });
      }

      await supabase.from('travel_days').insert(days);

      // 확인
      const { data: createdDays } = await supabase
        .from('travel_days')
        .select('*')
        .eq('travel_plan_id', travel.id)
        .order('day_number');

      expect(createdDays).toHaveLength(3);
      expect(createdDays[0].day_number).toBe(1);
      expect(createdDays[2].date).toBe('2025-08-17');
    });
  });
});
```

### 4.2 Google Maps 통합 테스트

```typescript
// __tests__/integration/google-maps.test.ts
import { Loader } from '@googlemaps/js-api-loader';
import { PlaceSearchComponent } from '@/components/features/maps/PlaceSearch';
import { render, screen, waitFor, fireEvent } from '@testing-library/react';

describe('Google Maps Integration', () => {
  let google: any;

  beforeAll(async () => {
    const loader = new Loader({
      apiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY!,
      version: "weekly",
      libraries: ["places"]
    });
    
    google = await loader.load();
  });

  it('장소 검색이 작동해야 함', async () => {
    const onPlaceSelect = jest.fn();
    
    render(
      <PlaceSearchComponent 
        onPlaceSelect={onPlaceSelect}
        defaultValue=""
      />
    );

    const input = screen.getByPlaceholderText('장소 검색');
    
    // 입력
    fireEvent.change(input, { target: { value: '제주 공항' } });

    // 자동완성 결과 대기
    await waitFor(() => {
      expect(screen.getByText(/제주국제공항/)).toBeInTheDocument();
    }, { timeout: 5000 });

    // 선택
    fireEvent.click(screen.getByText(/제주국제공항/));

    expect(onPlaceSelect).toHaveBeenCalledWith(
      expect.objectContaining({
        name: expect.stringContaining('제주'),
        place_id: expect.any(String),
        geometry: expect.any(Object)
      })
    );
  });
});
```

---

## 5. E2E 테스트 전략

### 5.1 Playwright 설정

```typescript
// playwright.config.ts
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  testDir: './e2e',
  fullyParallel: true,
  forbidOnly: !!process.env.CI,
  retries: process.env.CI ? 2 : 0,
  workers: process.env.CI ? 1 : undefined,
  reporter: 'html',
  
  use: {
    baseURL: 'http://localhost:3000',
    trace: 'on-first-retry',
    screenshot: 'only-on-failure',
    video: 'retain-on-failure',
  },

  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },
    {
      name: 'Mobile Chrome',
      use: { ...devices['Pixel 5'] },
    },
    {
      name: 'Mobile Safari',
      use: { ...devices['iPhone 12'] },
    },
  ],

  webServer: {
    command: 'npm run build && npm run start',
    port: 3000,
    reuseExistingServer: !process.env.CI,
  },
});
```

### 5.2 E2E 테스트 시나리오

```typescript
// e2e/travel-planning-flow.spec.ts
import { test, expect } from '@playwright/test';
import { setupE2EUser, cleanupE2EUser } from './helpers/auth';

test.describe('여행 계획 전체 플로우', () => {
  let testUser: any;

  test.beforeEach(async ({ page }) => {
    testUser = await setupE2EUser();
    await page.goto('/');
    
    // 로그인
    await page.fill('[data-testid=email-input]', testUser.email);
    await page.fill('[data-testid=password-input]', testUser.password);
    await page.click('[data-testid=login-button]');
    
    await page.waitForURL('/travels');
  });

  test.afterEach(async () => {
    await cleanupE2EUser(testUser.id);
  });

  test('여행 생성부터 계획 추가까지 전체 플로우', async ({ page }) => {
    // 1. 여행 생성
    await page.click('[data-testid=create-travel-button]');
    
    await page.fill('[data-testid=travel-title]', '제주도 가족 여행');
    await page.fill('[data-testid=destination]', '제주도');
    await page.fill('[data-testid=start-date]', '2025-08-15');
    await page.fill('[data-testid=end-date]', '2025-08-20');
    
    await page.click('[data-testid=save-travel-button]');
    
    // 여행 목록으로 리다이렉트
    await expect(page).toHaveURL('/travels');
    await expect(page.locator('text=제주도 가족 여행')).toBeVisible();
    
    // 2. 여행 상세 진입
    await page.click('text=제주도 가족 여행');
    await expect(page).toHaveURL(/\/travels\/.+/);
    
    // Day 탭 확인
    await expect(page.locator('text=Day 1')).toBeVisible();
    await expect(page.locator('text=Day 6')).toBeVisible();
    
    // 3. Day 1에 계획 추가
    await page.click('text=Day 1');
    await page.click('[data-testid=add-plan-button]');
    
    // 장소 검색 (Google Places)
    await page.fill('[data-testid=place-search]', '성산일출봉');
    await page.waitForSelector('.pac-item', { timeout: 5000 });
    await page.click('.pac-item >> nth=0');
    
    // 계획 상세 입력
    await page.fill('[data-testid=planned-time]', '09:00');
    await page.fill('[data-testid=duration]', '120');
    await page.selectOption('[data-testid=plan-type]', 'sightseeing');
    await page.fill('[data-testid=notes]', '일출 보기');
    
    await page.click('[data-testid=save-plan-button]');
    
    // 계획 추가 확인
    await expect(page.locator('text=성산일출봉')).toBeVisible();
    await expect(page.locator('text=09:00')).toBeVisible();
  });

  test('실시간 협업 시나리오', async ({ page, context }) => {
    // 첫 번째 사용자
    const travel = await createTestTravel(testUser.id);
    await page.goto(`/travels/${travel.id}`);
    
    // 두 번째 브라우저 컨텍스트 (다른 사용자)
    const page2 = await context.newPage();
    await page2.goto(`/travels/${travel.id}`);
    
    // 첫 번째 사용자가 계획 추가
    await page.click('[data-testid=add-plan-button]');
    await page.fill('[data-testid=place-search]', '한라산');
    // ... 계획 저장
    
    // 두 번째 사용자에게 실시간 반영 확인
    await expect(page2.locator('text=한라산')).toBeVisible({ timeout: 5000 });
  });
});
```

### 5.3 모바일 E2E 테스트

```typescript
// e2e/mobile-experience.spec.ts
import { test, expect, devices } from '@playwright/test';

test.use({
  ...devices['iPhone 13'],
});

test.describe('모바일 사용자 경험', () => {
  test('모바일에서 Container Queries가 작동해야 함', async ({ page }) => {
    await page.goto('/travels');
    
    // 모바일 뷰포트에서 카드 레이아웃 확인
    const travelCard = page.locator('[data-testid=travel-card]').first();
    
    // 세로 레이아웃 확인
    await expect(travelCard.locator('.@lg/travel-card\\:flex-row')).toHaveCSS('flex-direction', 'column');
    
    // 터치 인터랙션
    await travelCard.tap();
    await expect(page).toHaveURL(/\/travels\/.+/);
  });

  test('모바일 지도 인터페이스', async ({ page }) => {
    await page.goto('/map');
    
    // BottomSheet 확인
    const bottomSheet = page.locator('[data-testid=bottom-sheet]');
    await expect(bottomSheet).toBeVisible();
    
    // 스와이프 제스처
    await bottomSheet.dragTo(bottomSheet, {
      sourcePosition: { x: 150, y: 50 },
      targetPosition: { x: 150, y: 300 }
    });
    
    // 확장된 상태 확인
    await expect(bottomSheet).toHaveCSS('height', /[4-9]\d{2}px/);
  });
});
```

---

## 6. 시각적 회귀 테스트

### 6.1 Percy 설정

```typescript
// percy.config.js
module.exports = {
  version: 2,
  snapshot: {
    widths: [375, 768, 1280, 1920],
    minHeight: 1024,
    percyCSS: `
      /* Pretendard 폰트 로딩 대기 */
      @font-face {
        font-family: 'Pretendard Variable';
        src: url('https://cdn.jsdelivr.net/gh/orioncactus/pretendard@v1.3.9/dist/web/variable/pretendardvariable.woff2');
      }
    `
  },
  discovery: {
    allowedHostnames: ['localhost', 'cdn.jsdelivr.net', 'maps.googleapis.com']
  }
};
```

### 6.2 시각적 테스트 시나리오

```typescript
// e2e/visual-regression.spec.ts
import { test } from '@playwright/test';
import percySnapshot from '@percy/playwright';

test.describe('시각적 회귀 테스트', () => {
  test('여행 카드 컴포넌트', async ({ page }) => {
    await page.goto('/travels');
    
    // Pretendard 폰트 로딩 대기
    await page.waitForLoadState('networkidle');
    await page.waitForTimeout(1000); // 폰트 렌더링 대기
    
    await percySnapshot(page, '여행 목록 - 데스크톱');
    
    // 모바일 뷰포트
    await page.setViewportSize({ width: 375, height: 667 });
    await percySnapshot(page, '여행 목록 - 모바일');
  });

  test('Container Queries 반응형', async ({ page }) => {
    await page.goto('/travels/test-travel-id');
    
    const viewports = [
      { width: 320, height: 568, name: 'iPhone SE' },
      { width: 768, height: 1024, name: 'iPad' },
      { width: 1920, height: 1080, name: 'Desktop' }
    ];
    
    for (const viewport of viewports) {
      await page.setViewportSize(viewport);
      await page.waitForTimeout(500);
      await percySnapshot(page, `여행 상세 - ${viewport.name}`);
    }
  });
});
```

---

## 7. 성능 테스트

### 7.1 Lighthouse CI 설정

```javascript
// lighthouserc.js
module.exports = {
  ci: {
    collect: {
      url: [
        'https://travel.moonwave.kr/',
        'https://travel.moonwave.kr/travels',
        'https://travel.moonwave.kr/map'
      ],
      numberOfRuns: 3,
      settings: {
        preset: 'desktop',
        throttling: {
          cpuSlowdownMultiplier: 1
        }
      }
    },
    assert: {
      assertions: {
        'categories:performance': ['error', { minScore: 0.9 }],
        'categories:accessibility': ['error', { minScore: 0.95 }],
        'categories:seo': ['error', { minScore: 0.95 }],
        'first-contentful-paint': ['error', { maxNumericValue: 2000 }],
        'largest-contentful-paint': ['error', { maxNumericValue: 2500 }],
        'cumulative-layout-shift': ['error', { maxNumericValue: 0.1 }],
        'total-blocking-time': ['error', { maxNumericValue: 300 }]
      }
    },
    upload: {
      target: 'temporary-public-storage'
    }
  }
};
```

### 7.2 번들 사이즈 테스트

```typescript
// scripts/bundle-size-test.ts
import { readFileSync } from 'fs';
import { join } from 'path';

const MAX_BUNDLE_SIZE = 500 * 1024; // 500KB
const buildDir = join(process.cwd(), '.next/static/chunks');

function checkBundleSize() {
  const pages = readFileSync(join(buildDir, 'pages/_app.js'));
  const framework = readFileSync(join(buildDir, 'framework.js'));
  
  const totalSize = pages.length + framework.length;
  
  if (totalSize > MAX_BUNDLE_SIZE) {
    console.error(`❌ 번들 크기 초과: ${(totalSize / 1024).toFixed(2)}KB / ${MAX_BUNDLE_SIZE / 1024}KB`);
    process.exit(1);
  }
  
  console.log(`✅ 번들 크기: ${(totalSize / 1024).toFixed(2)}KB`);
}

checkBundleSize();
```

---

## 8. 테스트 커버리지 목표

### 8.1 커버리지 목표

| 카테고리 | 목표 | 현재 | 상태 |
|----------|------|------|------|
| **핵심 비즈니스 로직** | 90% | - | 🔴 |
| **UI 컴포넌트** | 70% | - | 🔴 |
| **커스텀 훅** | 85% | - | 🔴 |
| **유틸리티 함수** | 95% | - | 🔴 |
| **통합 테스트** | 80% | - | 🔴 |

### 8.2 커버리지 리포트 설정

```json
// package.json
{
  "scripts": {
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:e2e": "playwright test",
    "test:e2e:ui": "playwright test --ui",
    "test:visual": "percy exec -- npm run test:e2e",
    "test:all": "npm run test:coverage && npm run test:e2e"
  }
}
```

---

## ✅ 테스트 체크리스트

### 개발 중 테스트
- [ ] 컴포넌트 작성 시 단위 테스트 동시 작성
- [ ] 커스텀 훅 작성 시 통합 테스트 작성
- [ ] PR 전 `npm run test:all` 실행

### PR 체크리스트
- [ ] 모든 테스트 통과
- [ ] 커버리지 목표 달성
- [ ] E2E 테스트 통과
- [ ] 시각적 회귀 테스트 확인

### 배포 전 체크리스트
- [ ] 전체 테스트 스위트 실행
- [ ] 성능 테스트 통과
- [ ] 실제 Supabase 프로덕션 연결 테스트
- [ ] 크로스 브라우저 테스트 완료

---

**Moonwave Travel 테스트 전략 v1.0**  
*"가짜 흐름이 아닌, 실제 흐름으로 설계한다"*  
*Mock 최소화, 실제 데이터 기반 테스트*

이 테스트 전략을 통해 Moonwave Travel의 품질과 안정성을 보장하며, 실제 사용자 경험과 동일한 환경에서 테스트를 수행합니다.
