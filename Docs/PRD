# PRD – Moonwave Travel v3.0
> "가짜 흐름이 아닌, 실제 흐름으로 설계한다" - Moonwave 여행 플래닝 시스템

## 📋 1. 서비스 개요

### 1.1 제품명
**프로젝트명**: Moonwave Travel  
**영문명**: Moonwave Travel Planner  
**도메인**: travel.moonwave.kr

### 1.2 제품 비전 (Vision Statement)
**"여행 계획의 복잡함을 직관적 흐름으로 변화시켜, 모든 여행자가 자신만의 스토리를 아름답게 설계할 수 있도록 돕는다"**

### 1.3 제품 미션 (Mission Statement)
여행일정카드와 Day별 여행계획카드 기반으로 **Pretendard 한글 최적화 타이포그래피**와 **Container Queries 반응형 시스템**을 활용해 직관적이고 아름다운 여행 계획 경험을 제공합니다.

### 1.4 핵심 특징
- **Moonwave Design System**: Utility-First + Pretendard 폰트 + Container Queries
- **실시간 데이터 동기화**: Supabase Realtime 기반
- **한글 여행지 최적화**: 한국어 여행지명에 특화된 타이포그래피
- **GitHub 직접 배포**: travel.moonwave.kr 자동 배포

---

## 🎯 2. 목표 및 비전

### 2.1 해결하고자 하는 문제
1. **Primary Problem**: 여행 계획 도구의 복잡한 인터페이스와 한글 여행지명 가독성 문제 (78% 사용자)
2. **Secondary Problem**: 모바일에서 불편한 여행 일정 관리 (65% 사용자)  
3. **Tertiary Problem**: 지도와 일정 정보의 분리된 경험 (52% 사용자)

### 2.2 타겟 사용자
**Primary User**: 25-40세 여행 애호가, 체계적 계획 선호, 모바일 중심 사용  
**Secondary User**: 20-35세 커플/친구 그룹, 공유 일정 관리 필요  
**Persona**: "아름다운 여행 기록을 남기고 싶지만 복잡한 도구는 싫어하는 밀레니얼"

### 2.3 Moonwave 차별화 요소
- **한글 최적화**: Pretendard 폰트로 한국 여행지명 완벽 표현
- **Container 기반 반응형**: 여행카드가 컨테이너 크기에 따라 지능적 배치
- **실시간 동기화**: 여행 동반자 간 실시간 일정 공유
- **GitHub 배포**: 안정적이고 빠른 서비스 제공

---

## 🚀 3. 핵심 기능 및 요구사항

### 3.1 MVP (Minimum Viable Product) 기능

#### 3.1.1 여행일정카드 관리
**사용자 스토리**: "사용자는 새로운 여행을 계획하기 위해 여행일정카드를 생성하고 기본 정보를 설정할 수 있다"

**수용 기준**:
- [ ] 여행 제목, 목적지, 기간 설정 (Pretendard 폰트 적용)
- [ ] Container Queries 기반 카드 레이아웃 (@container 활용)
- [ ] 실시간 데이터 저장 (Supabase Realtime)
- [ ] 여행카드 리스트 뷰 (그리드 반응형)

**기술 구현**:
- Supabase 테이블: `travel_plans`
- React 컴포넌트: `TravelCard`, `CreateTravelForm`
- 훅: `useTravelPlans`, `useRealTimeSync`

#### 3.1.2 Day별 여행계획카드 시스템
**사용자 스토리**: "사용자는 Day별로 구체적인 여행 계획을 카드 형태로 추가하고 관리할 수 있다"

**수용 기준**:
- [ ] Day별 자동 생성 및 순서 관리
- [ ] 장소, 시간, 사진, 메모 입력 (한글 최적화 입력 필드)
- [ ] Google Places API 자동 완성
- [ ] 여행 유형별 Badge 컴포넌트 (Moonwave 컬러 시스템)

**기술 구현**:
- Supabase 테이블: `travel_days`, `day_plans`
- React 컴포넌트: `DayPlanCard`, `PlaceSearch`, `PlanBadge`
- 훅: `useDayPlans`, `useGooglePlaces`

#### 3.1.3 지도 통합 시각화
**사용자 스토리**: "사용자는 전체 여행 일정을 지도에서 한눈에 확인하고 각 계획의 세부사항에 바로 접근할 수 있다"

**수용 기준**:
- [ ] Google Maps 통합 (마커, 경로 표시)
- [ ] Container Queries 기반 지도 레이아웃
- [ ] 모바일 최적화 BottomSheet
- [ ] 계획 카드 연동 (클릭 시 상세 정보)

**기술 구현**:
- Google Maps JavaScript API
- 컴포넌트: `MapView`, `PlanMarker`, `BottomSheet`
- 훅: `useMapIntegration`

### 3.2 v1.1 확장 기능 (MVP 이후)

#### 3.2.1 여행 회고 및 기록 강화
- 여행 완료 후 사진/메모 기반 회고 기능
- SNS 스타일 여행 스토리 생성
- PDF/이미지 형태 여행 앨범 내보내기

#### 3.2.2 실시간 협업 기능
- 여행 동반자 초대 및 공유 편집
- 실시간 댓글 및 제안 시스템
- 역할별 권한 관리 (편집자/뷰어)

### 3.3 v1.2+ 장기 로드맵
- AI 기반 여행 추천 (GPT API 연동)
- 여행 예산 관리 통합
- 항공/숙박 예약 연동

---

## 🎨 4. Moonwave 디자인 시스템 요구사항

### 4.1 디자인 철학 (Moonwave 표준)
- **Utility-First**: Tailwind CSS 기반 컴포넌트 설계
- **Korean Typography**: Pretendard 폰트 한글 최적화
- **Container Responsive**: 컨테이너 기반 반응형 디자인
- **Accessibility First**: 접근성 우선 설계

### 4.2 Pretendard 폰트 시스템 (여행 특화)

#### 4.2.1 여행지명 타이포그래피
```css
/* 여행지 제목 - 강조 */
.destination-title {
  @apply font-pretendard font-bold text-2xl sm:text-3xl lg:text-4xl;
  @apply tracking-korean-tight break-keep-ko leading-tight;
  @apply text-gray-900 dark:text-white;
}

/* 여행 계획 제목 */
.plan-title {
  @apply font-pretendard font-semibold text-lg sm:text-xl;
  @apply tracking-korean-normal break-keep-ko;
  @apply text-gray-800 dark:text-gray-100;
}

/* 장소명 표시 */
.place-name {
  @apply font-pretendard font-medium text-base;
  @apply tracking-korean-normal break-keep-ko;
  @apply text-gray-900 dark:text-white;
}

/* 여행 메모 */
.travel-note {
  @apply font-pretendard font-normal text-sm lg:text-base;
  @apply tracking-korean-normal break-keep-ko leading-relaxed;
  @apply text-gray-700 dark:text-gray-300;
}
```

#### 4.2.2 숫자 최적화 (날짜, 시간)
```css
/* 날짜 표시 */
.travel-date {
  @apply font-pretendard text-numeric tabular-nums font-medium;
  @apply text-blue-600 dark:text-blue-400;
}

/* 시간 표시 */
.travel-time {
  @apply font-pretendard text-numeric tabular-nums font-normal;
  @apply text-gray-600 dark:text-gray-400;
}
```

### 4.3 Moonwave 브랜드 컬러 (여행 테마)
```css
/* Primary Colors - 여행의 자유로움 */
--travel-blue-50: #eff6ff;
--travel-blue-500: #3b82f6;  /* 메인 브랜드 컬러 */
--travel-blue-600: #2563eb;  /* 액션 버튼 */
--travel-blue-900: #1e3a8a;  /* 강조 텍스트 */

/* Secondary Colors - 여행의 다양성 */
--travel-purple-500: #8b5cf6; /* 계획 카테고리 */
--travel-green-500: #10b981;  /* 완료된 여행 */
--travel-amber-500: #f59e0b;  /* 진행 중 여행 */

/* Semantic Colors */
--success-travel: #10b981;    /* 성공적인 계획 저장 */
--warning-travel: #f59e0b;    /* 주의사항 알림 */
--error-travel: #ef4444;      /* 오류 상태 */
```

### 4.4 Container Queries 반응형 시스템

#### 4.4.1 여행카드 컨테이너 패턴
```tsx
// 여행 일정 카드 - Container Queries 적용
<div className="@container/travel-card bg-white rounded-xl shadow-soft p-4 @md/travel-card:p-6">
  <div className="@lg/travel-card:flex-row flex flex-col @lg/travel-card:items-center @lg/travel-card:justify-between">
    {/* 여행 정보 */}
    <div className="@lg/travel-card:flex-1 min-w-0">
      <h3 className="font-pretendard font-bold text-lg @lg/travel-card:text-xl text-gray-900 mb-2">
        {destination}
      </h3>
      <p className="font-pretendard text-sm @lg/travel-card:text-base text-gray-600 mb-3 @lg/travel-card:mb-0">
        {duration} • {companion}
      </p>
    </div>
    
    {/* 액션 버튼 */}
    <div className="@lg/travel-card:ml-6 flex gap-2">
      <button className="@md/travel-card:px-4 px-3 @md/travel-card:py-2 py-1.5 text-sm bg-blue-600 text-white rounded-md">
        <span className="@lg/travel-card:inline hidden">여행 </span>계획 보기
      </button>
    </div>
  </div>
</div>
```

#### 4.4.2 Day별 계획 카드 패턴
```tsx
// Day별 계획 카드 - 컨테이너 크기에 따른 적응형 레이아웃
<div className="@container/day-plan space-y-4">
  <div className="@md/day-plan:grid @md/day-plan:grid-cols-2 @lg/day-plan:grid-cols-3 @md/day-plan:gap-4 space-y-4 @md/day-plan:space-y-0">
    {dayPlans.map((plan) => (
      <div key={plan.id} className="@container/plan-card bg-white rounded-lg p-4 shadow-sm border">
        <div className="@sm/plan-card:flex @sm/plan-card:items-start @sm/plan-card:gap-3">
          {/* 시간 표시 */}
          <div className="@sm/plan-card:flex-shrink-0 mb-2 @sm/plan-card:mb-0">
            <span className="font-pretendard text-numeric font-medium text-blue-600">
              {plan.time}
            </span>
          </div>
          
          {/* 계획 내용 */}
          <div className="@sm/plan-card:flex-1 min-w-0">
            <h4 className="font-pretendard font-medium @sm/plan-card:text-base text-sm text-gray-900 mb-1">
              {plan.place}
            </h4>
            <p className="font-pretendard text-xs @sm/plan-card:text-sm text-gray-600 break-keep-ko">
              {plan.note}
            </p>
          </div>
        </div>
      </div>
    ))}
  </div>
</div>
```

### 4.5 여행 특화 컴포넌트 시스템

#### 4.5.1 여행 Badge 시스템
```tsx
// 여행 유형별 Badge 컴포넌트
const TravelBadge = ({ type, className }: Props) => {
  const badgeStyles = {
    sightseeing: 'bg-blue-100 text-blue-800 border-blue-200',
    dining: 'bg-amber-100 text-amber-800 border-amber-200',
    shopping: 'bg-purple-100 text-purple-800 border-purple-200',
    transportation: 'bg-gray-100 text-gray-800 border-gray-200',
    accommodation: 'bg-green-100 text-green-800 border-green-200'
  };
  
  return (
    <span className={cn(
      'font-pretendard font-medium px-2.5 py-0.5 rounded-full text-xs border',
      'tracking-korean-wide',
      badgeStyles[type],
      className
    )}>
      {type === 'sightseeing' && '관광'}
      {type === 'dining' && '식당'}
      {type === 'shopping' && '쇼핑'}
      {type === 'transportation' && '이동'}
      {type === 'accommodation' && '숙박'}
    </span>
  );
};
```

#### 4.5.2 지도 통합 레이아웃
```tsx
// 지도 + 계획 리스트 통합 뷰 (Container Queries)
<div className="@container/map-layout h-screen flex flex-col">
  {/* 지도 영역 */}
  <div className="@lg/map-layout:flex-1 @lg/map-layout:min-h-0 h-1/2 relative">
    <GoogleMapComponent />
  </div>
  
  {/* 계획 리스트 영역 */}
  <div className="@lg/map-layout:w-96 @lg/map-layout:border-l @lg/map-layout:border-gray-200 
                @lg/map-layout:h-full @lg/map-layout:overflow-y-auto 
                h-1/2 border-t border-gray-200 overflow-y-auto bg-white">
    <div className="@md/map-layout:p-6 p-4">
      <h3 className="font-pretendard font-bold text-lg mb-4">여행 계획</h3>
      <PlanList />
    </div>
  </div>
</div>
```

---

## 🛠 5. 기술 요구사항 (Moonwave 표준)

### 5.1 필수 기술 스택

#### 5.1.1 Frontend (Moonwave 표준)
- **Framework**: React 18 + TypeScript 5 (Phase 1) → Next.js Static Export (Phase 2)
- **Styling**: Tailwind CSS + Container Queries + Pretendard 폰트
- **State Management**: React Context + Custom Hooks + Zustand
- **Build Tool**: Vite (Phase 1) → Next.js (Phase 2)
- **Maps**: Google Maps JavaScript API + React Google Maps

#### 5.1.2 Backend (Moonwave 표준)
- **Database**: Supabase PostgreSQL
- **Authentication**: Supabase Auth (Magic Link + OAuth)
- **Real-time**: Supabase Realtime
- **Storage**: Supabase Storage (여행 사진)
- **External API**: Google Places API, Google Maps Geocoding API

#### 5.1.3 Infrastructure (Moonwave 표준)
- **Hosting**: Vercel (동적 기능 지원)
- **CI/CD**: GitHub Actions
- **Domain**: travel.moonwave.kr
- **Environment**: Production Only (localhost 개발 금지)

### 5.2 Moonwave 개발 정책 (필수 준수)

#### 5.2.1 금지 사항
```typescript
const FORBIDDEN_PRACTICES = {
  localhost_development: "localhost:3000, npm run dev 등 로컬 서버 실행 완전 금지",
  mock_data_usage: [
    "const mockTravelPlans = [...]",
    "const dummyDestinations = [...]", 
    "/public/travel-data.json",
    "hardcoded travel arrays"
  ],
  development_shortcuts: [
    "if (process.env.NODE_ENV === 'development') useMockData()",
    "const data = isDev ? mockTravel : realTravel"
  ]
} as const;
```

#### 5.2.2 필수 실행 사항
```typescript
const REQUIRED_PRACTICES = {
  github_direct_access: "Cursor AI → GitHub Repository 직접 접속",
  real_database_only: "프로젝트 시작과 동시에 Supabase 여행 DB 연동",
  deployment_automation: "GitHub Actions → travel.moonwave.kr 자동 배포",
  pretendard_optimization: "모든 텍스트에 Pretendard 한글 최적화 적용"
} as const;
```

### 5.3 데이터베이스 설계 (Supabase)

#### 5.3.1 여행 관련 테이블 스키마
```sql
-- 여행 일정 테이블
CREATE TABLE travel_plans (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  title TEXT NOT NULL,
  destination TEXT NOT NULL,
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  description TEXT,
  cover_image_url TEXT,
  is_public BOOLEAN DEFAULT FALSE,
  status TEXT DEFAULT 'planning', -- planning, ongoing, completed
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Day별 여행 일자 테이블
CREATE TABLE travel_days (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  travel_plan_id UUID REFERENCES travel_plans(id) ON DELETE CASCADE NOT NULL,
  day_number INTEGER NOT NULL,
  date DATE NOT NULL,
  title TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(travel_plan_id, day_number)
);

-- Day별 계획 카드 테이블
CREATE TABLE day_plans (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  travel_day_id UUID REFERENCES travel_days(id) ON DELETE CASCADE NOT NULL,
  place_name TEXT NOT NULL,
  place_address TEXT,
  google_place_id TEXT,
  latitude DECIMAL(10, 8),
  longitude DECIMAL(11, 8),
  planned_time TIME,
  duration_minutes INTEGER,
  plan_type TEXT DEFAULT 'sightseeing', -- sightseeing, dining, shopping, transportation, accommodation
  notes TEXT,
  image_urls TEXT[], -- 배열 형태로 여러 이미지 저장
  youtube_url TEXT,
  order_index INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- RLS 정책 설정
ALTER TABLE travel_plans ENABLE ROW LEVEL SECURITY;
ALTER TABLE travel_days ENABLE ROW LEVEL SECURITY;
ALTER TABLE day_plans ENABLE ROW LEVEL SECURITY;

-- 사용자별 데이터 격리
CREATE POLICY "Users can manage own travel plans" ON travel_plans
  FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can manage own travel days" ON travel_days
  FOR ALL USING (
    auth.uid() = (SELECT user_id FROM travel_plans WHERE id = travel_plan_id)
  );

CREATE POLICY "Users can manage own day plans" ON day_plans
  FOR ALL USING (
    auth.uid() = (SELECT tp.user_id FROM travel_plans tp 
                  JOIN travel_days td ON tp.id = td.travel_plan_id 
                  WHERE td.id = travel_day_id)
  );
```

### 5.4 실시간 데이터 연동 (Mock 데이터 완전 대체)

#### 5.4.1 여행 계획 실시간 훅
```typescript
// ✅ 반드시 사용해야 할 패턴 - 실제 Supabase 데이터만
export const useTravelPlans = () => {
  const { user, supabase } = useSupabase();
  const [travelPlans, setTravelPlans] = useState<TravelPlan[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchTravelPlans = useCallback(async () => {
    if (!user) {
      setTravelPlans([]);
      setLoading(false);
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const { data, error } = await supabase
        .from('travel_plans')
        .select(`
          *,
          travel_days (
            *,
            day_plans (*)
          )
        `)
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });

      if (error) throw error;
      setTravelPlans(data || []);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '여행 데이터 로딩 실패';
      setError(errorMessage);
      console.error('여행 계획 로딩 실패:', err);
    } finally {
      setLoading(false);
    }
  }, [user, supabase]);

  // 실시간 구독
  useEffect(() => {
    if (!user) return;

    fetchTravelPlans();

    const subscription = supabase
      .channel('travel_plans_realtime')
      .on('postgres_changes', 
        { 
          event: '*', 
          schema: 'public', 
          table: 'travel_plans',
          filter: `user_id=eq.${user.id}`
        },
        (payload) => {
          console.log('여행 계획 실시간 변경:', payload);
          fetchTravelPlans();
        }
      )
      .subscribe();

    return () => {
      subscription.unsubscribe();
    };
  }, [fetchTravelPlans, user, supabase]);

  return {
    travelPlans,
    loading,
    error,
    refetch: fetchTravelPlans
  };
};
```

---

## 📊 6. 비즈니스 요구사항 및 성공 지표

### 6.1 비즈니스 목표

#### 6.1.1 단기 목표 (3개월)
- **월 활성 사용자**: 1,000명 달성
- **사용자당 평균 여행 계획**: 3개 등록
- **일 평균 세션 시간**: 8분
- **Pretendard 폰트 만족도**: 85% 이상

#### 6.1.2 중기 목표 (6개월)
- **월 활성 사용자**: 5,000명 달성
- **여행 완료율**: 70% (계획 대비 실제 실행)
- **컨테이너 반응형 만족도**: 90% 이상
- **평균 페이지 로딩 시간**: 2초 이하

#### 6.1.3 장기 목표 (1년)
- **월 활성 사용자**: 10,000명 달성
- **여행 공유 기능 사용률**: 60%
- **모바일 사용률**: 80% 이상

### 6.2 핵심 성과 지표 (KPI)

#### 6.2.1 사용자 참여 지표
- **월 활성 사용자 (MAU)**: 1,000명 (3개월 내)
- **일 활성 사용자 (DAU)**: 200명 (3개월 내)  
- **사용자 유지율**: 60% (7일), 40% (30일)
- **평균 세션 시간**: 8분

#### 6.2.2 기능 사용 지표
- **여행 계획 생성률**: 85% (가입 후 첫 여행 계획 생성)
- **Day별 계획 등록률**: 70% (여행 계획당 평균 5일)
- **지도 기능 사용률**: 60% (계획 확인 시 지도 뷰 접근)
- **사진 업로드률**: 50% (계획당 평균 3장)

#### 6.2.3 UI/UX 성과 지표
- **Pretendard 폰트 가독성 만족도**: 85% 이상
- **Container Queries 반응형 만족도**: 90% 이상
- **모바일 사용성 점수**: 4.5/5.0 이상
- **첫 여행 계획 생성 시간**: 5분 이내

### 6.3 성공 지표 모니터링

#### 6.3.1 Core Web Vitals (Moonwave 표준)
- **LCP (Largest Contentful Paint)**: < 2.5초
- **FID (First Input Delay)**: < 100ms
- **CLS (Cumulative Layout Shift)**: < 0.1
- **번들 크기**: < 500KB (gzipped)

#### 6.3.2 한글 타이포그래피 성능
- **Pretendard 폰트 로딩 시간**: < 500ms
- **한글 여행지명 렌더링 품질**: 100% (안티앨리어싱)
- **줄바꿈 최적화 적용률**: 100% (break-keep-ko)

---

## ✅ 7. 정의 완료 기준 (Definition of Done)

### 7.1 기능 개발 완료 기준

#### 7.1.1 Moonwave 표준 준수
- [ ] **Pretendard 폰트**: 모든 텍스트 요소에 font-pretendard 클래스 적용
- [ ] **한글 최적화**: tracking-korean-normal, break-keep-ko 클래스 적용
- [ ] **Container Queries**: @container 기반 반응형 레이아웃 구현
- [ ] **antialiased**: 폰트 렌더링 최적화 적용

#### 7.1.2 기능 검증
- [ ] **실제 Supabase 데이터 연동**: Mock 데이터 사용 금지 확인
- [ ] **실시간 동기화**: Supabase Realtime 작동 확인
- [ ] **Google Maps 통합**: 장소 검색 및 마커 표시 정상 작동
- [ ] **여행 CRUD**: 생성/수정/삭제/조회 모든 기능 정상 작동

#### 7.1.3 코드 품질
- [ ] **TypeScript strict 모드**: 타입 에러 0개
- [ ] **ESLint 검사**: 린트 에러 0개
- [ ] **접근성**: ARIA 레이블, 키보드 내비게이션 지원
- [ ] **에러 처리**: 네트워크/DB 에러 상황 대응

### 7.2 배포 검증 (Moonwave 표준)

#### 7.2.1 GitHub Actions 배포
- [ ] **자동 배포**: main 브랜치 push 시 자동 배포 성공
- [ ] **도메인 접속**: travel.moonwave.kr 정상 접속 확인
- [ ] **환경 변수**: Supabase 연결 정보 정상 설정
- [ ] **빌드 최적화**: 번들 크기 500KB 이하

#### 7.2.2 성능 검증
- [ ] **페이지 로딩**: 초기 로딩 3초 이하
- [ ] **Core Web Vitals**: LCP < 2.5초, FID < 100ms, CLS < 0.1
- [ ] **Pretendard 폰트**: 폰트 로딩 500ms 이하
- [ ] **모바일 최적화**: iOS/Android 브라우저 정상 작동

### 7.3 사용자 경험 검증

#### 7.3.1 한글 여행지명 최적화
- [ ] **가독성**: 한글 여행지명 완벽한 표시
- [ ] **줄바꿈**: break-keep-ko로 자연스러운 줄바꿈
- [ ] **자간**: tracking-korean-normal로 최적화된 자간
- [ ] **크로스 브라우저**: 모든 브라우저에서 일관된 표시

#### 7.3.2 Container Queries 반응형
- [ ] **카드 레이아웃**: 컨테이너 크기에 따른 지능적 배치
- [ ] **지도 통합**: 다양한 화면 크기에서 최적화된 지도 뷰
- [ ] **모바일 우선**: 터치 친화적 인터페이스
- [ ] **부드러운 전환**: 레이아웃 변경 시 자연스러운 애니메이션

---

## 🗓 8. 개발 로드맵

### 8.1 Phase 1: Moonwave 기반 MVP (완료 목표: 4주)

#### Week 1: 프로젝트 기반 구축
- [ ] GitHub Repository 설정 (travel.moonwave.kr)
- [ ] Supabase 프로젝트 생성 및 스키마 설정
- [ ] Pretendard 폰트 + Container Queries 기본 설정
- [ ] GitHub Actions 배포 파이프라인 구축

#### Week 2: 핵심 컴포넌트 개발
- [ ] TravelCard 컴포넌트 (Container Queries 적용)
- [ ] DayPlanCard 컴포넌트 (Pretendard 최적화)
- [ ] 여행 CRUD 기능 (실제 Supabase 연동)
- [ ] 실시간 데이터 동기화 구현

#### Week 3: 지도 통합 및 장소 검색
- [ ] Google Maps 통합 (반응형 레이아웃)
- [ ] Google Places API 연동
- [ ] 장소 자동완성 및 정보 매핑
- [ ] 모바일 최적화 지도 인터페이스

#### Week 4: 최적화 및 릴리즈 준비
- [ ] 성능 최적화 (Bundle size, Core Web Vitals)
- [ ] 한글 타이포그래피 최종 검증
- [ ] 사용자 테스트 및 피드백 반영
- [ ] travel.moonwave.kr 공식 런칭

### 8.2 Phase 2: 기능 강화 (목표: 4주)

#### 고도화 기능
- [ ] 여행 회고 및 스토리 생성 기능
- [ ] 실시간 협업 편집 (Supabase Realtime 확장)
- [ ] 고급 지도 기능 (경로 최적화, 거리 계산)
- [ ] SNS 연동 및 여행 공유

#### UI/UX 개선
- [ ] 추가 Container Queries 패턴 적용
- [ ] 마이크로 애니메이션 강화
- [ ] 다크모드 지원 (Pretendard 다크모드 최적화)
- [ ] 접근성 개선

### 8.3 Phase 3: 확장 기능 (목표: 6주)

#### 비즈니스 확장
- [ ] 여행 예산 관리 통합
- [ ] AI 추천 시스템 (GPT API)
- [ ] 여행 커뮤니티 기능
- [ ] 파트너십 연동 (숙박/항공)

#### 기술적 확장
- [ ] Next.js 마이그레이션 계획
- [ ] PWA 지원
- [ ] 오프라인 기능
- [ ] 성능 모니터링 고도화

---

**Moonwave Travel PRD v3.0**  
*"가짜 흐름이 아닌, 실제 흐름으로 설계한다"*  
*Pretendard 한글 최적화 + Container Queries 기반 프리미엄 여행 계획 경험*

---

### 📋 문서 히스토리
- **v1.0**: 초기 요구사항 정의
- **v2.0**: Tailwind UI Toolkit 기반 디자인 시스템 도입
- **v3.0**: **Moonwave 디자인 시스템 표준 적용** (Pretendard + Container Queries + 실시간 DB 연동)
