name: Vercel Deployment

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # ÏΩîÎìú ÌíàÏßà Í≤ÄÏÇ¨ Î∞è ÎπåÎìú ÌÖåÏä§Ìä∏
  quality-check:
    name: Code Quality & Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Lint check
        run: npm run lint

      - name: Format check
        run: npm run format:check

      - name: Build test
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: ${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}
          NEXT_PUBLIC_GOOGLE_PLACES_API_KEY: ${{ secrets.NEXT_PUBLIC_GOOGLE_PLACES_API_KEY }}
          NEXT_PUBLIC_GOOGLE_PLACES_NEW_API_KEY: ${{ secrets.NEXT_PUBLIC_GOOGLE_PLACES_NEW_API_KEY }}
          NEXT_PUBLIC_GOOGLE_DIRECTIONS_API_KEY: ${{ secrets.NEXT_PUBLIC_GOOGLE_DIRECTIONS_API_KEY }}
          NEXT_PUBLIC_GOOGLE_GEOCODING_API_KEY: ${{ secrets.NEXT_PUBLIC_GOOGLE_GEOCODING_API_KEY }}

  # Vercel Preview Î∞∞Ìè¨ (PRÏö©)
  preview-deployment:
    name: Preview Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: quality-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview_url=$url" >> $GITHUB_OUTPUT

      - name: Create preview deployment
        uses: actions/github-script@v7
        id: create_preview_deployment
        with:
          script: |
            try {
              const deployment = await github.rest.repos.createDeployment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.sha,
                environment: 'preview',
                description: 'Preview deployment via Vercel',
                auto_merge: false,
                required_contexts: []
              });
              console.log('‚úÖ Preview deployment created with ID:', deployment.data.id);
              return deployment.data.id;
            } catch (error) {
              console.error('‚ùå Failed to create preview deployment:', error.message);
              core.setFailed(`Failed to create preview deployment: ${error.message}`);
              return null;
            }

      - name: Update preview deployment status
        uses: actions/github-script@v7
        if: steps.create_preview_deployment.outputs.result
        with:
          script: |
            try {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: ${{ steps.create_preview_deployment.outputs.result }},
                state: 'success',
                environment_url: '${{ steps.deploy.outputs.preview_url }}',
                description: 'Preview deployment successful'
              });
              console.log('‚úÖ Preview deployment status updated successfully');
            } catch (error) {
              console.error('‚ùå Failed to update preview deployment status:', error.message);
              core.setFailed(`Failed to update preview deployment status: ${error.message}`);
            }

      - name: Comment PR with Preview URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Preview Deployment**\n\n‚úÖ Preview URL: ${{ steps.deploy.outputs.preview_url }}\n\nÎ∞∞Ìè¨Í∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§! ÎØ∏Î¶¨Î≥¥Í∏∞ ÎßÅÌÅ¨ÏóêÏÑú Î≥ÄÍ≤ΩÏÇ¨Ìï≠ÏùÑ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî.`
            })

  # Vercel Production Î∞∞Ìè¨ (main Î∏åÎûúÏπòÏö©)
  production-deployment:
    name: Production Deployment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: quality-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "production_url=$url" >> $GITHUB_OUTPUT

      - name: Create deployment
        uses: actions/github-script@v7
        id: create_deployment
        with:
          script: |
            try {
              const deployment = await github.rest.repos.createDeployment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.sha,
                environment: 'production',
                description: 'Production deployment via Vercel',
                auto_merge: false,
                required_contexts: []
              });
              console.log('‚úÖ Production deployment created with ID:', deployment.data.id);
              return deployment.data.id;
            } catch (error) {
              console.error('‚ùå Failed to create deployment:', error.message);
              core.setFailed(`Failed to create deployment: ${error.message}`);
              return null;
            }

      - name: Update deployment status
        uses: actions/github-script@v7
        if: steps.create_deployment.outputs.result
        with:
          script: |
            try {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: ${{ steps.create_deployment.outputs.result }},
                state: 'success',
                environment_url: '${{ steps.deploy.outputs.production_url }}',
                description: 'Production deployment successful'
              });
              console.log('‚úÖ Deployment status updated successfully');
            } catch (error) {
              console.error('‚ùå Failed to update deployment status:', error.message);
              core.setFailed(`Failed to update deployment status: ${error.message}`);
            }

  # Î≥¥Ïïà Í≤ÄÏÇ¨
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
